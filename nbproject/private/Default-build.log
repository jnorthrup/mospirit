----------Building project:[ mlite - Debug ]----------
make[1]: Entering directory `/home/jim/work/mlite'
clang++  -c  "/home/jim/work/mlite/mlite.cpp" -g -O0 -Wall  -o ./Debug/mlite.o -I. -I. 
/home/jim/work/mlite/mlite.cpp:97:36: warning: in-class initialization of non-static data member is a C++11 extension [-Wc++11-extensions]
qi::rule<Iterator,space_type > ELSE=lit("else"), IF=lit("if"), WHEN=lit("when"), WHILE=lit("while"), THEN=lit("then"), FOR=lit("for"), END=lit("end"), OR=lit("or"), AND=lit("and"), COMMA=lit(','),
                                   ^
/home/jim/work/mlite/mlite.cpp:97:52: warning: in-class initialization of non-static data member is a C++11 extension [-Wc++11-extensions]
qi::rule<Iterator,space_type > ELSE=lit("else"), IF=lit("if"), WHEN=lit("when"), WHILE=lit("while"), THEN=lit("then"), FOR=lit("for"), END=lit("end"), OR=lit("or"), AND=lit("and"), COMMA=lit(','),
                                                   ^
/home/jim/work/mlite/mlite.cpp:97:68: warning: in-class initialization of non-static data member is a C++11 extension [-Wc++11-extensions]
qi::rule<Iterator,space_type > ELSE=lit("else"), IF=lit("if"), WHEN=lit("when"), WHILE=lit("while"), THEN=lit("then"), FOR=lit("for"), END=lit("end"), OR=lit("or"), AND=lit("and"), COMMA=lit(','),
                                                                   ^
/home/jim/work/mlite/mlite.cpp:97:87: warning: in-class initialization of non-static data member is a C++11 extension [-Wc++11-extensions]
qi::rule<Iterator,space_type > ELSE=lit("else"), IF=lit("if"), WHEN=lit("when"), WHILE=lit("while"), THEN=lit("then"), FOR=lit("for"), END=lit("end"), OR=lit("or"), AND=lit("and"), COMMA=lit(','),
                                                                                      ^
/home/jim/work/mlite/mlite.cpp:97:106: warning: in-class initialization of non-static data member is a C++11 extension [-Wc++11-extensions]
qi::rule<Iterator,space_type > ELSE=lit("else"), IF=lit("if"), WHEN=lit("when"), WHILE=lit("while"), THEN=lit("then"), FOR=lit("for"), END=lit("end"), OR=lit("or"), AND=lit("and"), COMMA=lit(','),
                                                                                                         ^
/home/jim/work/mlite/mlite.cpp:97:123: warning: in-class initialization of non-static data member is a C++11 extension [-Wc++11-extensions]
qi::rule<Iterator,space_type > ELSE=lit("else"), IF=lit("if"), WHEN=lit("when"), WHILE=lit("while"), THEN=lit("then"), FOR=lit("for"), END=lit("end"), OR=lit("or"), AND=lit("and"), COMMA=lit(','),
                                                                                                                          ^
/home/jim/work/mlite/mlite.cpp:97:139: warning: in-class initialization of non-static data member is a C++11 extension [-Wc++11-extensions]
qi::rule<Iterator,space_type > ELSE=lit("else"), IF=lit("if"), WHEN=lit("when"), WHILE=lit("while"), THEN=lit("then"), FOR=lit("for"), END=lit("end"), OR=lit("or"), AND=lit("and"), COMMA=lit(','),
                                                                                                                                          ^
/home/jim/work/mlite/mlite.cpp:97:154: warning: in-class initialization of non-static data member is a C++11 extension [-Wc++11-extensions]
qi::rule<Iterator,space_type > ELSE=lit("else"), IF=lit("if"), WHEN=lit("when"), WHILE=lit("while"), THEN=lit("then"), FOR=lit("for"), END=lit("end"), OR=lit("or"), AND=lit("and"), COMMA=lit(','),
                                                                                                                                                         ^
/home/jim/work/mlite/mlite.cpp:97:169: warning: in-class initialization of non-static data member is a C++11 extension [-Wc++11-extensions]
qi::rule<Iterator,space_type > ELSE=lit("else"), IF=lit("if"), WHEN=lit("when"), WHILE=lit("while"), THEN=lit("then"), FOR=lit("for"), END=lit("end"), OR=lit("or"), AND=lit("and"), COMMA=lit(','),
                                                                                                                                                                        ^
/home/jim/work/mlite/mlite.cpp:97:187: warning: in-class initialization of non-static data member is a C++11 extension [-Wc++11-extensions]
qi::rule<Iterator,space_type > ELSE=lit("else"), IF=lit("if"), WHEN=lit("when"), WHILE=lit("while"), THEN=lit("then"), FOR=lit("for"), END=lit("end"), OR=lit("or"), AND=lit("and"), COMMA=lit(','),
                                                                                                                                                                                          ^
/home/jim/work/mlite/mlite.cpp:98:3: warning: in-class initialization of non-static data member is a C++11 extension [-Wc++11-extensions]
EQ=lit('='), SEMICOLON=lit(';'), LOOP=lit("loop"), ELSEWHEN=lit("elsewhen"), ELSEIF=lit("elseif"), FUNCTION=lit("function"), CLASS=lit("class");
  ^
/home/jim/work/mlite/mlite.cpp:98:23: warning: in-class initialization of non-static data member is a C++11 extension [-Wc++11-extensions]
EQ=lit('='), SEMICOLON=lit(';'), LOOP=lit("loop"), ELSEWHEN=lit("elsewhen"), ELSEIF=lit("elseif"), FUNCTION=lit("function"), CLASS=lit("class");
                      ^
/home/jim/work/mlite/mlite.cpp:98:38: warning: in-class initialization of non-static data member is a C++11 extension [-Wc++11-extensions]
EQ=lit('='), SEMICOLON=lit(';'), LOOP=lit("loop"), ELSEWHEN=lit("elsewhen"), ELSEIF=lit("elseif"), FUNCTION=lit("function"), CLASS=lit("class");
                                     ^
/home/jim/work/mlite/mlite.cpp:98:60: warning: in-class initialization of non-static data member is a C++11 extension [-Wc++11-extensions]
EQ=lit('='), SEMICOLON=lit(';'), LOOP=lit("loop"), ELSEWHEN=lit("elsewhen"), ELSEIF=lit("elseif"), FUNCTION=lit("function"), CLASS=lit("class");
                                                           ^
/home/jim/work/mlite/mlite.cpp:98:84: warning: in-class initialization of non-static data member is a C++11 extension [-Wc++11-extensions]
EQ=lit('='), SEMICOLON=lit(';'), LOOP=lit("loop"), ELSEWHEN=lit("elsewhen"), ELSEIF=lit("elseif"), FUNCTION=lit("function"), CLASS=lit("class");
                                                                                   ^
/home/jim/work/mlite/mlite.cpp:98:108: warning: in-class initialization of non-static data member is a C++11 extension [-Wc++11-extensions]
EQ=lit('='), SEMICOLON=lit(';'), LOOP=lit("loop"), ELSEWHEN=lit("elsewhen"), ELSEIF=lit("elseif"), FUNCTION=lit("function"), CLASS=lit("class");
                                                                                                           ^
/home/jim/work/mlite/mlite.cpp:98:131: warning: in-class initialization of non-static data member is a C++11 extension [-Wc++11-extensions]
EQ=lit('='), SEMICOLON=lit(';'), LOOP=lit("loop"), ELSEWHEN=lit("elsewhen"), ELSEIF=lit("elseif"), FUNCTION=lit("function"), CLASS=lit("class");
                                                                                                                                  ^
/home/jim/work/mlite/mlite.cpp:99:61: warning: in-class initialization of non-static data member is a C++11 extension [-Wc++11-extensions]
qi::rule<Iterator, std::string(), space_type> IDENT, STRING = omit [ char_("\"") [_a =_1] ] >> no_skip [ *(char_ - char_(_a)) ] >> lit(_a) ;
                                                            ^
In file included from /home/jim/work/mlite/mlite.cpp:29:
In file included from ./pch.hxx:10:
In file included from /usr/include/boost/spirit/include/qi.hpp:16:
In file included from /usr/include/boost/spirit/home/qi.hpp:14:
In file included from /usr/include/boost/spirit/home/qi/action.hpp:14:
In file included from /usr/include/boost/spirit/home/qi/action/action.hpp:14:
In file included from /usr/include/boost/spirit/home/qi/meta_compiler.hpp:15:
In file included from /usr/include/boost/spirit/home/qi/domain.hpp:18:
/usr/include/boost/spirit/home/support/context.hpp:216:13: error: no matching function for call to 'assertion_failed'
            BOOST_SPIRIT_ASSERT_MSG(
            ^~~~~~~~~~~~~~~~~~~~~~~~
/usr/include/boost/spirit/home/support/assert_msg.hpp:31:9: note: expanded from macro 'BOOST_SPIRIT_ASSERT_MSG'
        BOOST_MPL_ASSERT_MSG(Cond, Msg, Types)
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
/usr/include/boost/mpl/assert.hpp:434:48: note: expanded from macro 'BOOST_MPL_ASSERT_MSG'
#define BOOST_MPL_ASSERT_MSG( c, msg, types_ ) \
                                               ^
/usr/include/boost/mpl/assert.hpp:428:9: note: expanded from macro '\
BOOST_MPL_ASSERT_MSG_IMPL'
        boost::mpl::assertion_failed<(c)>( BOOST_PP_CAT(mpl_assert_arg,counter)::assert_arg() ) \
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
/usr/include/boost/mpl/assert.hpp:59:58: note: expanded from macro '\
BOOST_MPL_AUX_ASSERT_CONSTANT'
#   define BOOST_MPL_AUX_ASSERT_CONSTANT(T, expr) enum { expr }
                                                         ^
/usr/include/boost/spirit/home/phoenix/operator/self.hpp:69:5: note: in instantiation of template class 'boost::spirit::local_variable<0>::result<boost::phoenix::basic_environment<boost::fusion::vector1<char &>, boost::spirit::context<boost::fusion::cons<std::basic_string<char> &, boost::fusion::nil>, boost::fusion::vector0<void> >, bool, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_> >' requested here
    PHOENIX_BINARY_EVAL(assign_eval, result_of_assign, x = y)
    ^
/usr/include/boost/spirit/home/phoenix/operator/detail/binary_eval.hpp:22:34: note: expanded from macro 'PHOENIX_BINARY_EVAL'
            typedef typename A0::template result<Env>::type x_type;              \
                                 ^
/usr/include/boost/spirit/home/phoenix/core/detail/composite_eval.hpp:86:50: note: in instantiation of template class 'boost::phoenix::assign_eval::result<boost::phoenix::basic_environment<boost::fusion::vector1<char &>, boost::spirit::context<boost::fusion::cons<std::basic_string<char> &, boost::fusion::nil>, boost::fusion::vector0<void> >, bool, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_>, boost::spirit::local_variable<0>, boost::spirit::argument<0> >' requested here
                    Composite::eval_policy_type::template result<
                                                 ^
/usr/include/boost/spirit/home/phoenix/core/composite.hpp:60:17: note: in instantiation of template class 'boost::phoenix::detail::composite_eval<2>::result<boost::phoenix::composite<boost::phoenix::assign_eval, boost::fusion::vector<boost::spirit::local_variable<0>, boost::spirit::argument<0>, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_> >, boost::phoenix::basic_environment<boost::fusion::vector1<char &>, boost::spirit::context<boost::fusion::cons<std::basic_string<char> &, boost::fusion::nil>, boost::fusion::vector0<void> >, bool, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_> >' requested here
                template result<self_type, Env>::type
                ^
/usr/include/boost/spirit/home/phoenix/core/actor.hpp:56:32: note: in instantiation of template class 'boost::phoenix::composite<boost::phoenix::assign_eval, boost::fusion::vector<boost::spirit::local_variable<0>, boost::spirit::argument<0>, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_> >::result<boost::phoenix::basic_environment<boost::fusion::vector1<char &>, boost::spirit::context<boost::fusion::cons<std::basic_string<char> &, boost::fusion::nil>, boost::fusion::vector0<void> >, bool, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_> >' requested here
        typedef typename Eval::template result<Env>::type type;
                               ^
/usr/include/boost/spirit/home/phoenix/core/detail/actor.hpp:38:9: note: in instantiation of template class 'boost::phoenix::eval_result<boost::phoenix::composite<boost::phoenix::assign_eval, boost::fusion::vector<boost::spirit::local_variable<0>, boost::spirit::argument<0>, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_> >, boost::phoenix::basic_environment<boost::fusion::vector1<char &>, boost::spirit::context<boost::fusion::cons<std::basic_string<char> &, boost::fusion::nil>, boost::fusion::vector0<void> >, bool, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_> >' requested here
      : eval_result<
        ^
/usr/include/boost/spirit/home/phoenix/core/detail/actor.hpp:51:14: note: (skipping 17 contexts in backtrace; use -ftemplate-backtrace-limit=0 to see all)
    typename result<
             ^
/usr/include/boost/function/function_template.hpp:1069:5: note: in instantiation of function template specialization 'boost::function4<bool, __gnu_cxx::__normal_iterator<const char *, std::basic_string<char> > &, const __gnu_cxx::__normal_iterator<const char *, std::basic_string<char> > &, boost::spirit::context<boost::fusion::cons<std::basic_string<char> &, boost::fusion::nil>, boost::fusion::vector0<void> > &, const boost::spirit::qi::char_class<boost::spirit::tag::char_code<boost::spirit::tag::space, boost::spirit::char_encoding::ascii> > &>::function4<boost::spirit::qi::detail::parser_binder<boost::spirit::qi::sequence<boost::fusion::cons<boost::spirit::qi::omit_directive<boost::spirit::qi::action<boost::spirit::qi::literal_char<boost::spirit::char_encoding::ascii, false, false>, boost::phoenix::actor<boost::phoenix::composite<boost::phoenix::assign_eval, boost::fusion::vector<boost::spirit::local_variable<0>, boost::spirit::argument<0>, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_> > > > >, boost::fusion::cons<boost::spirit::qi::no_skip_directive<boost::spirit::qi::kleene<boost::spirit::qi::difference<boost::spirit::qi::char_class<boost::spirit::tag::char_code<boost::spirit::tag::char_, boost::spirit::char_encoding::ascii> >, boost::spirit::qi::lazy_parser<boost::phoenix::actor<boost::phoenix::composite<boost::phoenix::detail::function_eval<1>, boost::fusion::vector<boost::phoenix::value<boost::spirit::terminal<boost::spirit::tag::char_code<boost::spirit::tag::char_, boost::spirit::char_encoding::ascii> > >, boost::spirit::local_variable<0>, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_> > >, boost::spirit::unused_type> > > >, boost::fusion::cons<boost::spirit::qi::lazy_parser<boost::phoenix::actor<boost::phoenix::composite<boost::phoenix::detail::function_eval<1>, boost::fusion::vector<boost::phoenix::value<boost::spirit::terminal<boost::spirit::tag::lit> >, boost::spirit::local_variable<0>, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_> > >, boost::spirit::unused_type>, boost::fusion::nil> > > >, mpl_::bool_<false> > >' requested here
    base_type(f)
    ^
/usr/include/boost/function/function_template.hpp:1124:5: note: in instantiation of function template specialization 'boost::function<bool (__gnu_cxx::__normal_iterator<const char *, std::basic_string<char> > &, const __gnu_cxx::__normal_iterator<const char *, std::basic_string<char> > &, boost::spirit::context<boost::fusion::cons<std::basic_string<char> &, boost::fusion::nil>, boost::fusion::vector0<void> > &, const boost::spirit::qi::char_class<boost::spirit::tag::char_code<boost::spirit::tag::space, boost::spirit::char_encoding::ascii> > &)>::function<boost::spirit::qi::detail::parser_binder<boost::spirit::qi::sequence<boost::fusion::cons<boost::spirit::qi::omit_directive<boost::spirit::qi::action<boost::spirit::qi::literal_char<boost::spirit::char_encoding::ascii, false, false>, boost::phoenix::actor<boost::phoenix::composite<boost::phoenix::assign_eval, boost::fusion::vector<boost::spirit::local_variable<0>, boost::spirit::argument<0>, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_> > > > >, boost::fusion::cons<boost::spirit::qi::no_skip_directive<boost::spirit::qi::kleene<boost::spirit::qi::difference<boost::spirit::qi::char_class<boost::spirit::tag::char_code<boost::spirit::tag::char_, boost::spirit::char_encoding::ascii> >, boost::spirit::qi::lazy_parser<boost::phoenix::actor<boost::phoenix::composite<boost::phoenix::detail::function_eval<1>, boost::fusion::vector<boost::phoenix::value<boost::spirit::terminal<boost::spirit::tag::char_code<boost::spirit::tag::char_, boost::spirit::char_encoding::ascii> > >, boost::spirit::local_variable<0>, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_> > >, boost::spirit::unused_type> > > >, boost::fusion::cons<boost::spirit::qi::lazy_parser<boost::phoenix::actor<boost::phoenix::composite<boost::phoenix::detail::function_eval<1>, boost::fusion::vector<boost::phoenix::value<boost::spirit::terminal<boost::spirit::tag::lit> >, boost::spirit::local_variable<0>, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_> > >, boost::spirit::unused_type>, boost::fusion::nil> > > >, mpl_::bool_<false> > >' requested here
    self_type(f).swap(*this);
    ^
/usr/include/boost/spirit/home/qi/nonterminal/rule.hpp:182:19: note: in instantiation of function template specialization 'boost::function<bool (__gnu_cxx::__normal_iterator<const char *, std::basic_string<char> > &, const __gnu_cxx::__normal_iterator<const char *, std::basic_string<char> > &, boost::spirit::context<boost::fusion::cons<std::basic_string<char> &, boost::fusion::nil>, boost::fusion::vector0<void> > &, const boost::spirit::qi::char_class<boost::spirit::tag::char_code<boost::spirit::tag::space, boost::spirit::char_encoding::ascii> > &)>::operator=<boost::spirit::qi::detail::parser_binder<boost::spirit::qi::sequence<boost::fusion::cons<boost::spirit::qi::omit_directive<boost::spirit::qi::action<boost::spirit::qi::literal_char<boost::spirit::char_encoding::ascii, false, false>, boost::phoenix::actor<boost::phoenix::composite<boost::phoenix::assign_eval, boost::fusion::vector<boost::spirit::local_variable<0>, boost::spirit::argument<0>, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_> > > > >, boost::fusion::cons<boost::spirit::qi::no_skip_directive<boost::spirit::qi::kleene<boost::spirit::qi::difference<boost::spirit::qi::char_class<boost::spirit::tag::char_code<boost::spirit::tag::char_, boost::spirit::char_encoding::ascii> >, boost::spirit::qi::lazy_parser<boost::phoenix::actor<boost::phoenix::composite<boost::phoenix::detail::function_eval<1>, boost::fusion::vector<boost::phoenix::value<boost::spirit::terminal<boost::spirit::tag::char_code<boost::spirit::tag::char_, boost::spirit::char_encoding::ascii> > >, boost::spirit::local_variable<0>, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_> > >, boost::spirit::unused_type> > > >, boost::fusion::cons<boost::spirit::qi::lazy_parser<boost::phoenix::actor<boost::phoenix::composite<boost::phoenix::detail::function_eval<1>, boost::fusion::vector<boost::phoenix::value<boost::spirit::terminal<boost::spirit::tag::lit> >, boost::spirit::local_variable<0>, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_> > >, boost::spirit::unused_type>, boost::fusion::nil> > > >, mpl_::bool_<false> > >' requested here
            lhs.f = detail::bind_parser<Auto>(
                  ^
/usr/include/boost/spirit/home/qi/nonterminal/rule.hpp:191:13: note: in instantiation of function template specialization 'boost::spirit::qi::rule<__gnu_cxx::__normal_iterator<const char *, std::basic_string<char> >, std::basic_string<char> (), boost::proto::exprns_::expr<boost::proto::tagns_::tag::terminal, boost::proto::argsns_::term<boost::spirit::tag::char_code<boost::spirit::tag::space, boost::spirit::char_encoding::ascii> >, 0>, boost::spirit::unused_type, boost::spirit::unused_type>::define<mpl_::bool_<false>, boost::proto::exprns_::expr<boost::proto::tagns_::tag::shift_right, boost::proto::argsns_::list2<const boost::proto::exprns_::expr<boost::proto::tagns_::tag::shift_right, boost::proto::argsns_::list2<const boost::proto::exprns_::expr<boost::proto::tagns_::tag::subscript, boost::proto::argsns_::list2<const boost::proto::exprns_::expr<boost::proto::tagns_::tag::terminal, boost::proto::argsns_::term<boost::spirit::tag::omit>, 0> &, const boost::proto::exprns_::expr<boost::proto::tagns_::tag::subscript, boost::proto::argsns_::list2<boost::proto::exprns_::expr<boost::proto::tagns_::tag::terminal, boost::proto::argsns_::term<boost::spirit::terminal_ex<boost::spirit::tag::char_code<boost::spirit::tag::char_, boost::spirit::char_encoding::ascii>, boost::fusion::vector1<char const (&)[2]> > >, 0> &, boost::proto::exprns_::expr<boost::proto::tagns_::tag::terminal, boost::proto::argsns_::term<const boost::phoenix::actor<boost::phoenix::composite<boost::phoenix::assign_eval, boost::fusion::vector<boost::spirit::local_variable<0>, boost::spirit::argument<0>, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_> > > &>, 0> >, 2> &>, 2> &, const boost::proto::exprns_::expr<boost::proto::tagns_::tag::subscript, boost::proto::argsns_::list2<const boost::proto::exprns_::expr<boost::proto::tagns_::tag::terminal, boost::proto::argsns_::term<boost::spirit::tag::no_skip>, 0> &, const boost::proto::exprns_::expr<boost::proto::tagns_::tag::dereference, boost::proto::argsns_::list1<const boost::proto::exprns_::expr<boost::proto::tagns_::tag::minus, boost::proto::argsns_::list2<const boost::spirit::terminal<boost::spirit::tag::char_code<boost::spirit::tag::char_, boost::spirit::char_encoding::ascii> > &, const boost::proto::exprns_::expr<boost::proto::tagns_::tag::terminal, boost::proto::argsns_::term<boost::spirit::lazy_terminal<boost::spirit::tag::char_code<boost::spirit::tag::char_, boost::spirit::char_encoding::ascii>, boost::phoenix::actor<boost::phoenix::composite<boost::phoenix::detail::function_eval<1>, boost::fusion::vector<boost::phoenix::value<boost::spirit::terminal<boost::spirit::tag::char_code<boost::spirit::tag::char_, boost::spirit::char_encoding::ascii> > >, boost::spirit::local_variable<0>, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_> > >, 1> >, 0> &>, 2> &>, 1> &>, 2> &>, 2> &, const boost::proto::exprns_::expr<boost::proto::tagns_::tag::terminal, boost::proto::argsns_::term<boost::spirit::lazy_terminal<boost::spirit::tag::lit, boost::phoenix::actor<boost::phoenix::composite<boost::phoenix::detail::function_eval<1>, boost::fusion::vector<boost::phoenix::value<boost::spirit::terminal<boost::spirit::tag::lit> >, boost::spirit::local_variable<0>, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_> > >, 1> >, 0> &>, 2> >' requested here
            define<mpl::false_>(*this, expr, traits::matches<qi::domain, Expr>());
            ^
/home/jim/work/mlite/mlite.cpp:99:63: note: in instantiation of function template specialization 'boost::spirit::qi::rule<__gnu_cxx::__normal_iterator<const char *, std::basic_string<char> >, std::basic_string<char> (), boost::proto::exprns_::expr<boost::proto::tagns_::tag::terminal, boost::proto::argsns_::term<boost::spirit::tag::char_code<boost::spirit::tag::space, boost::spirit::char_encoding::ascii> >, 0>, boost::spirit::unused_type, boost::spirit::unused_type>::rule<boost::proto::exprns_::expr<boost::proto::tagns_::tag::shift_right, boost::proto::argsns_::list2<const boost::proto::exprns_::expr<boost::proto::tagns_::tag::shift_right, boost::proto::argsns_::list2<const boost::proto::exprns_::expr<boost::proto::tagns_::tag::subscript, boost::proto::argsns_::list2<const boost::proto::exprns_::expr<boost::proto::tagns_::tag::terminal, boost::proto::argsns_::term<boost::spirit::tag::omit>, 0> &, const boost::proto::exprns_::expr<boost::proto::tagns_::tag::subscript, boost::proto::argsns_::list2<boost::proto::exprns_::expr<boost::proto::tagns_::tag::terminal, boost::proto::argsns_::term<boost::spirit::terminal_ex<boost::spirit::tag::char_code<boost::spirit::tag::char_, boost::spirit::char_encoding::ascii>, boost::fusion::vector1<char const (&)[2]> > >, 0> &, boost::proto::exprns_::expr<boost::proto::tagns_::tag::terminal, boost::proto::argsns_::term<const boost::phoenix::actor<boost::phoenix::composite<boost::phoenix::assign_eval, boost::fusion::vector<boost::spirit::local_variable<0>, boost::spirit::argument<0>, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_> > > &>, 0> >, 2> &>, 2> &, const boost::proto::exprns_::expr<boost::proto::tagns_::tag::subscript, boost::proto::argsns_::list2<const boost::proto::exprns_::expr<boost::proto::tagns_::tag::terminal, boost::proto::argsns_::term<boost::spirit::tag::no_skip>, 0> &, const boost::proto::exprns_::expr<boost::proto::tagns_::tag::dereference, boost::proto::argsns_::list1<const boost::proto::exprns_::expr<boost::proto::tagns_::tag::minus, boost::proto::argsns_::list2<const boost::spirit::terminal<boost::spirit::tag::char_code<boost::spirit::tag::char_, boost::spirit::char_encoding::ascii> > &, const boost::proto::exprns_::expr<boost::proto::tagns_::tag::terminal, boost::proto::argsns_::term<boost::spirit::lazy_terminal<boost::spirit::tag::char_code<boost::spirit::tag::char_, boost::spirit::char_encoding::ascii>, boost::phoenix::actor<boost::phoenix::composite<boost::phoenix::detail::function_eval<1>, boost::fusion::vector<boost::phoenix::value<boost::spirit::terminal<boost::spirit::tag::char_code<boost::spirit::tag::char_, boost::spirit::char_encoding::ascii> > >, boost::spirit::local_variable<0>, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_> > >, 1> >, 0> &>, 2> &>, 1> &>, 2> &>, 2> &, const boost::proto::exprns_::expr<boost::proto::tagns_::tag::terminal, boost::proto::argsns_::term<boost::spirit::lazy_terminal<boost::spirit::tag::lit, boost::phoenix::actor<boost::phoenix::composite<boost::phoenix::detail::function_eval<1>, boost::fusion::vector<boost::phoenix::value<boost::spirit::terminal<boost::spirit::tag::lit> >, boost::spirit::local_variable<0>, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_> > >, 1> >, 0> &>, 2> >' requested here
qi::rule<Iterator, std::string(), space_type> IDENT, STRING = omit [ char_("\"") [_a =_1] ] >> no_skip [ *(char_ - char_(_a)) ] >> lit(_a) ;
                                                              ^
/usr/include/boost/mpl/assert.hpp:82:5: note: candidate function [with C = false] not viable: no known conversion from 'boost::mpl::failed ************(boost::spirit::local_variable<0>::result<boost::phoenix::basic_environment<boost::fusion::vector1<char &>, boost::spirit::context<boost::fusion::cons<std::basic_string<char> &, boost::fusion::nil>, boost::fusion::vector0<void> >, bool, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_> >::index_is_out_of_bounds::************)()' to 'typename assert<false>::type' (aka 'mpl_::assert<false>') for 1st argument
int assertion_failed( typename assert<C>::type );
    ^
In file included from /home/jim/work/mlite/mlite.cpp:29:
In file included from ./pch.hxx:10:
In file included from /usr/include/boost/spirit/include/qi.hpp:16:
In file included from /usr/include/boost/spirit/home/qi.hpp:14:
In file included from /usr/include/boost/spirit/home/qi/action.hpp:14:
In file included from /usr/include/boost/spirit/home/qi/action/action.hpp:21:
/usr/include/boost/spirit/home/support/action_dispatch.hpp:178:13: error: no matching function for call to object of type 'const phoenix::actor<composite<assign_eval, vector<local_variable<0>, argument<0>, void_, void_, void_, void_, void_, void_, void_, void_> > >'
            f(attr_wrap, context, pass);
            ^
/usr/include/boost/spirit/home/qi/action/action.hpp:69:21: note: in instantiation of function template specialization 'boost::spirit::traits::action_dispatch<boost::spirit::qi::literal_char<boost::spirit::char_encoding::ascii, false, false> >::operator()<boost::phoenix::composite<boost::phoenix::assign_eval, boost::fusion::vector<boost::spirit::local_variable<0>, boost::spirit::argument<0>, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_> >, char, boost::spirit::context<boost::fusion::cons<std::basic_string<char> &, boost::fusion::nil>, boost::fusion::vector0<void> > >' requested here
                if (traits::action_dispatch<Subject>()(f, attr, context)) 
                    ^
/usr/include/boost/spirit/home/qi/directive/omit.hpp:62:28: note: in instantiation of function template specialization 'boost::spirit::qi::action<boost::spirit::qi::literal_char<boost::spirit::char_encoding::ascii, false, false>, boost::phoenix::actor<boost::phoenix::composite<boost::phoenix::assign_eval, boost::fusion::vector<boost::spirit::local_variable<0>, boost::spirit::argument<0>, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_> > > >::parse<__gnu_cxx::__normal_iterator<const char *, std::basic_string<char> >, boost::spirit::context<boost::fusion::cons<std::basic_string<char> &, boost::fusion::nil>, boost::fusion::vector0<void> >, boost::spirit::qi::char_class<boost::spirit::tag::char_code<boost::spirit::tag::space, boost::spirit::char_encoding::ascii> >, const boost::spirit::unused_type>' requested here
            return subject.parse(first, last, context, skipper, attr);
                           ^
/usr/include/boost/spirit/home/qi/detail/fail_function.hpp:38:31: note: in instantiation of function template specialization 'boost::spirit::qi::omit_directive<boost::spirit::qi::action<boost::spirit::qi::literal_char<boost::spirit::char_encoding::ascii, false, false>, boost::phoenix::actor<boost::phoenix::composite<boost::phoenix::assign_eval, boost::fusion::vector<boost::spirit::local_variable<0>, boost::spirit::argument<0>, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_> > > > >::parse<__gnu_cxx::__normal_iterator<const char *, std::basic_string<char> >, boost::spirit::context<boost::fusion::cons<std::basic_string<char> &, boost::fusion::nil>, boost::fusion::vector0<void> >, boost::spirit::qi::char_class<boost::spirit::tag::char_code<boost::spirit::tag::space, boost::spirit::char_encoding::ascii> >, const boost::spirit::unused_type>' requested here
            return !component.parse(first, last, context, skipper, attr);
                              ^
/usr/include/boost/spirit/home/qi/detail/pass_container.hpp:289:20: note: in instantiation of function template specialization 'boost::spirit::qi::detail::fail_function<__gnu_cxx::__normal_iterator<const char *, std::basic_string<char> >, boost::spirit::context<boost::fusion::cons<std::basic_string<char> &, boost::fusion::nil>, boost::fusion::vector0<void> >, boost::spirit::qi::char_class<boost::spirit::tag::char_code<boost::spirit::tag::space, boost::spirit::char_encoding::ascii> > >::operator()<boost::spirit::qi::omit_directive<boost::spirit::qi::action<boost::spirit::qi::literal_char<boost::spirit::char_encoding::ascii, false, false>, boost::phoenix::actor<boost::phoenix::composite<boost::phoenix::assign_eval, boost::fusion::vector<boost::spirit::local_variable<0>, boost::spirit::argument<0>, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_> > > > >, const boost::spirit::unused_type>' requested here
            return f(component, unused);
                   ^
/usr/include/boost/spirit/home/qi/detail/pass_container.hpp:331:20: note: in instantiation of function template specialization 'boost::spirit::qi::detail::pass_container<boost::spirit::qi::detail::fail_function<__gnu_cxx::__normal_iterator<const char *, std::basic_string<char> >, boost::spirit::context<boost::fusion::cons<std::basic_string<char> &, boost::fusion::nil>, boost::fusion::vector0<void> >, boost::spirit::qi::char_class<boost::spirit::tag::char_code<boost::spirit::tag::space, boost::spirit::char_encoding::ascii> > >, std::basic_string<char>, mpl_::bool_<true> >::dispatch_attribute<boost::spirit::qi::omit_directive<boost::spirit::qi::action<boost::spirit::qi::literal_char<boost::spirit::char_encoding::ascii, false, false>, boost::phoenix::actor<boost::phoenix::composite<boost::phoenix::assign_eval, boost::fusion::vector<boost::spirit::local_variable<0>, boost::spirit::argument<0>, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_> > > > > >' requested here
            return dispatch_attribute(component, predicate());
                   ^
/usr/include/boost/fusion/algorithm/query/detail/any.hpp:37:16: note: (skipping 10 contexts in backtrace; use -ftemplate-backtrace-limit=0 to see all)
        return f(x) || 
               ^
/usr/include/boost/function/function_template.hpp:1069:5: note: in instantiation of function template specialization 'boost::function4<bool, __gnu_cxx::__normal_iterator<const char *, std::basic_string<char> > &, const __gnu_cxx::__normal_iterator<const char *, std::basic_string<char> > &, boost::spirit::context<boost::fusion::cons<std::basic_string<char> &, boost::fusion::nil>, boost::fusion::vector0<void> > &, const boost::spirit::qi::char_class<boost::spirit::tag::char_code<boost::spirit::tag::space, boost::spirit::char_encoding::ascii> > &>::function4<boost::spirit::qi::detail::parser_binder<boost::spirit::qi::sequence<boost::fusion::cons<boost::spirit::qi::omit_directive<boost::spirit::qi::action<boost::spirit::qi::literal_char<boost::spirit::char_encoding::ascii, false, false>, boost::phoenix::actor<boost::phoenix::composite<boost::phoenix::assign_eval, boost::fusion::vector<boost::spirit::local_variable<0>, boost::spirit::argument<0>, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_> > > > >, boost::fusion::cons<boost::spirit::qi::no_skip_directive<boost::spirit::qi::kleene<boost::spirit::qi::difference<boost::spirit::qi::char_class<boost::spirit::tag::char_code<boost::spirit::tag::char_, boost::spirit::char_encoding::ascii> >, boost::spirit::qi::lazy_parser<boost::phoenix::actor<boost::phoenix::composite<boost::phoenix::detail::function_eval<1>, boost::fusion::vector<boost::phoenix::value<boost::spirit::terminal<boost::spirit::tag::char_code<boost::spirit::tag::char_, boost::spirit::char_encoding::ascii> > >, boost::spirit::local_variable<0>, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_> > >, boost::spirit::unused_type> > > >, boost::fusion::cons<boost::spirit::qi::lazy_parser<boost::phoenix::actor<boost::phoenix::composite<boost::phoenix::detail::function_eval<1>, boost::fusion::vector<boost::phoenix::value<boost::spirit::terminal<boost::spirit::tag::lit> >, boost::spirit::local_variable<0>, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_> > >, boost::spirit::unused_type>, boost::fusion::nil> > > >, mpl_::bool_<false> > >' requested here
    base_type(f)
    ^
/usr/include/boost/function/function_template.hpp:1124:5: note: in instantiation of function template specialization 'boost::function<bool (__gnu_cxx::__normal_iterator<const char *, std::basic_string<char> > &, const __gnu_cxx::__normal_iterator<const char *, std::basic_string<char> > &, boost::spirit::context<boost::fusion::cons<std::basic_string<char> &, boost::fusion::nil>, boost::fusion::vector0<void> > &, const boost::spirit::qi::char_class<boost::spirit::tag::char_code<boost::spirit::tag::space, boost::spirit::char_encoding::ascii> > &)>::function<boost::spirit::qi::detail::parser_binder<boost::spirit::qi::sequence<boost::fusion::cons<boost::spirit::qi::omit_directive<boost::spirit::qi::action<boost::spirit::qi::literal_char<boost::spirit::char_encoding::ascii, false, false>, boost::phoenix::actor<boost::phoenix::composite<boost::phoenix::assign_eval, boost::fusion::vector<boost::spirit::local_variable<0>, boost::spirit::argument<0>, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_> > > > >, boost::fusion::cons<boost::spirit::qi::no_skip_directive<boost::spirit::qi::kleene<boost::spirit::qi::difference<boost::spirit::qi::char_class<boost::spirit::tag::char_code<boost::spirit::tag::char_, boost::spirit::char_encoding::ascii> >, boost::spirit::qi::lazy_parser<boost::phoenix::actor<boost::phoenix::composite<boost::phoenix::detail::function_eval<1>, boost::fusion::vector<boost::phoenix::value<boost::spirit::terminal<boost::spirit::tag::char_code<boost::spirit::tag::char_, boost::spirit::char_encoding::ascii> > >, boost::spirit::local_variable<0>, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_> > >, boost::spirit::unused_type> > > >, boost::fusion::cons<boost::spirit::qi::lazy_parser<boost::phoenix::actor<boost::phoenix::composite<boost::phoenix::detail::function_eval<1>, boost::fusion::vector<boost::phoenix::value<boost::spirit::terminal<boost::spirit::tag::lit> >, boost::spirit::local_variable<0>, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_> > >, boost::spirit::unused_type>, boost::fusion::nil> > > >, mpl_::bool_<false> > >' requested here
    self_type(f).swap(*this);
    ^
/usr/include/boost/spirit/home/qi/nonterminal/rule.hpp:182:19: note: in instantiation of function template specialization 'boost::function<bool (__gnu_cxx::__normal_iterator<const char *, std::basic_string<char> > &, const __gnu_cxx::__normal_iterator<const char *, std::basic_string<char> > &, boost::spirit::context<boost::fusion::cons<std::basic_string<char> &, boost::fusion::nil>, boost::fusion::vector0<void> > &, const boost::spirit::qi::char_class<boost::spirit::tag::char_code<boost::spirit::tag::space, boost::spirit::char_encoding::ascii> > &)>::operator=<boost::spirit::qi::detail::parser_binder<boost::spirit::qi::sequence<boost::fusion::cons<boost::spirit::qi::omit_directive<boost::spirit::qi::action<boost::spirit::qi::literal_char<boost::spirit::char_encoding::ascii, false, false>, boost::phoenix::actor<boost::phoenix::composite<boost::phoenix::assign_eval, boost::fusion::vector<boost::spirit::local_variable<0>, boost::spirit::argument<0>, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_> > > > >, boost::fusion::cons<boost::spirit::qi::no_skip_directive<boost::spirit::qi::kleene<boost::spirit::qi::difference<boost::spirit::qi::char_class<boost::spirit::tag::char_code<boost::spirit::tag::char_, boost::spirit::char_encoding::ascii> >, boost::spirit::qi::lazy_parser<boost::phoenix::actor<boost::phoenix::composite<boost::phoenix::detail::function_eval<1>, boost::fusion::vector<boost::phoenix::value<boost::spirit::terminal<boost::spirit::tag::char_code<boost::spirit::tag::char_, boost::spirit::char_encoding::ascii> > >, boost::spirit::local_variable<0>, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_> > >, boost::spirit::unused_type> > > >, boost::fusion::cons<boost::spirit::qi::lazy_parser<boost::phoenix::actor<boost::phoenix::composite<boost::phoenix::detail::function_eval<1>, boost::fusion::vector<boost::phoenix::value<boost::spirit::terminal<boost::spirit::tag::lit> >, boost::spirit::local_variable<0>, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_> > >, boost::spirit::unused_type>, boost::fusion::nil> > > >, mpl_::bool_<false> > >' requested here
            lhs.f = detail::bind_parser<Auto>(
                  ^
/usr/include/boost/spirit/home/qi/nonterminal/rule.hpp:191:13: note: in instantiation of function template specialization 'boost::spirit::qi::rule<__gnu_cxx::__normal_iterator<const char *, std::basic_string<char> >, std::basic_string<char> (), boost::proto::exprns_::expr<boost::proto::tagns_::tag::terminal, boost::proto::argsns_::term<boost::spirit::tag::char_code<boost::spirit::tag::space, boost::spirit::char_encoding::ascii> >, 0>, boost::spirit::unused_type, boost::spirit::unused_type>::define<mpl_::bool_<false>, boost::proto::exprns_::expr<boost::proto::tagns_::tag::shift_right, boost::proto::argsns_::list2<const boost::proto::exprns_::expr<boost::proto::tagns_::tag::shift_right, boost::proto::argsns_::list2<const boost::proto::exprns_::expr<boost::proto::tagns_::tag::subscript, boost::proto::argsns_::list2<const boost::proto::exprns_::expr<boost::proto::tagns_::tag::terminal, boost::proto::argsns_::term<boost::spirit::tag::omit>, 0> &, const boost::proto::exprns_::expr<boost::proto::tagns_::tag::subscript, boost::proto::argsns_::list2<boost::proto::exprns_::expr<boost::proto::tagns_::tag::terminal, boost::proto::argsns_::term<boost::spirit::terminal_ex<boost::spirit::tag::char_code<boost::spirit::tag::char_, boost::spirit::char_encoding::ascii>, boost::fusion::vector1<char const (&)[2]> > >, 0> &, boost::proto::exprns_::expr<boost::proto::tagns_::tag::terminal, boost::proto::argsns_::term<const boost::phoenix::actor<boost::phoenix::composite<boost::phoenix::assign_eval, boost::fusion::vector<boost::spirit::local_variable<0>, boost::spirit::argument<0>, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_> > > &>, 0> >, 2> &>, 2> &, const boost::proto::exprns_::expr<boost::proto::tagns_::tag::subscript, boost::proto::argsns_::list2<const boost::proto::exprns_::expr<boost::proto::tagns_::tag::terminal, boost::proto::argsns_::term<boost::spirit::tag::no_skip>, 0> &, const boost::proto::exprns_::expr<boost::proto::tagns_::tag::dereference, boost::proto::argsns_::list1<const boost::proto::exprns_::expr<boost::proto::tagns_::tag::minus, boost::proto::argsns_::list2<const boost::spirit::terminal<boost::spirit::tag::char_code<boost::spirit::tag::char_, boost::spirit::char_encoding::ascii> > &, const boost::proto::exprns_::expr<boost::proto::tagns_::tag::terminal, boost::proto::argsns_::term<boost::spirit::lazy_terminal<boost::spirit::tag::char_code<boost::spirit::tag::char_, boost::spirit::char_encoding::ascii>, boost::phoenix::actor<boost::phoenix::composite<boost::phoenix::detail::function_eval<1>, boost::fusion::vector<boost::phoenix::value<boost::spirit::terminal<boost::spirit::tag::char_code<boost::spirit::tag::char_, boost::spirit::char_encoding::ascii> > >, boost::spirit::local_variable<0>, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_> > >, 1> >, 0> &>, 2> &>, 1> &>, 2> &>, 2> &, const boost::proto::exprns_::expr<boost::proto::tagns_::tag::terminal, boost::proto::argsns_::term<boost::spirit::lazy_terminal<boost::spirit::tag::lit, boost::phoenix::actor<boost::phoenix::composite<boost::phoenix::detail::function_eval<1>, boost::fusion::vector<boost::phoenix::value<boost::spirit::terminal<boost::spirit::tag::lit> >, boost::spirit::local_variable<0>, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_> > >, 1> >, 0> &>, 2> >' requested here
            define<mpl::false_>(*this, expr, traits::matches<qi::domain, Expr>());
            ^
/home/jim/work/mlite/mlite.cpp:99:63: note: in instantiation of function template specialization 'boost::spirit::qi::rule<__gnu_cxx::__normal_iterator<const char *, std::basic_string<char> >, std::basic_string<char> (), boost::proto::exprns_::expr<boost::proto::tagns_::tag::terminal, boost::proto::argsns_::term<boost::spirit::tag::char_code<boost::spirit::tag::space, boost::spirit::char_encoding::ascii> >, 0>, boost::spirit::unused_type, boost::spirit::unused_type>::rule<boost::proto::exprns_::expr<boost::proto::tagns_::tag::shift_right, boost::proto::argsns_::list2<const boost::proto::exprns_::expr<boost::proto::tagns_::tag::shift_right, boost::proto::argsns_::list2<const boost::proto::exprns_::expr<boost::proto::tagns_::tag::subscript, boost::proto::argsns_::list2<const boost::proto::exprns_::expr<boost::proto::tagns_::tag::terminal, boost::proto::argsns_::term<boost::spirit::tag::omit>, 0> &, const boost::proto::exprns_::expr<boost::proto::tagns_::tag::subscript, boost::proto::argsns_::list2<boost::proto::exprns_::expr<boost::proto::tagns_::tag::terminal, boost::proto::argsns_::term<boost::spirit::terminal_ex<boost::spirit::tag::char_code<boost::spirit::tag::char_, boost::spirit::char_encoding::ascii>, boost::fusion::vector1<char const (&)[2]> > >, 0> &, boost::proto::exprns_::expr<boost::proto::tagns_::tag::terminal, boost::proto::argsns_::term<const boost::phoenix::actor<boost::phoenix::composite<boost::phoenix::assign_eval, boost::fusion::vector<boost::spirit::local_variable<0>, boost::spirit::argument<0>, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_> > > &>, 0> >, 2> &>, 2> &, const boost::proto::exprns_::expr<boost::proto::tagns_::tag::subscript, boost::proto::argsns_::list2<const boost::proto::exprns_::expr<boost::proto::tagns_::tag::terminal, boost::proto::argsns_::term<boost::spirit::tag::no_skip>, 0> &, const boost::proto::exprns_::expr<boost::proto::tagns_::tag::dereference, boost::proto::argsns_::list1<const boost::proto::exprns_::expr<boost::proto::tagns_::tag::minus, boost::proto::argsns_::list2<const boost::spirit::terminal<boost::spirit::tag::char_code<boost::spirit::tag::char_, boost::spirit::char_encoding::ascii> > &, const boost::proto::exprns_::expr<boost::proto::tagns_::tag::terminal, boost::proto::argsns_::term<boost::spirit::lazy_terminal<boost::spirit::tag::char_code<boost::spirit::tag::char_, boost::spirit::char_encoding::ascii>, boost::phoenix::actor<boost::phoenix::composite<boost::phoenix::detail::function_eval<1>, boost::fusion::vector<boost::phoenix::value<boost::spirit::terminal<boost::spirit::tag::char_code<boost::spirit::tag::char_, boost::spirit::char_encoding::ascii> > >, boost::spirit::local_variable<0>, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_> > >, 1> >, 0> &>, 2> &>, 1> &>, 2> &>, 2> &, const boost::proto::exprns_::expr<boost::proto::tagns_::tag::terminal, boost::proto::argsns_::term<boost::spirit::lazy_terminal<boost::spirit::tag::lit, boost::phoenix::actor<boost::phoenix::composite<boost::phoenix::detail::function_eval<1>, boost::fusion::vector<boost::phoenix::value<boost::spirit::terminal<boost::spirit::tag::lit> >, boost::spirit::local_variable<0>, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_> > >, 1> >, 0> &>, 2> >' requested here
qi::rule<Iterator, std::string(), space_type> IDENT, STRING = omit [ char_("\"") [_a =_1] ] >> no_skip [ *(char_ - char_(_a)) ] >> lit(_a) ;
                                                              ^
/usr/include/boost/spirit/home/phoenix/core/detail/actor.hpp:54:5: note: candidate template ignored: substitution failure [with T0 = boost::fusion::vector1<char &>, T1 = boost::spirit::context<boost::fusion::cons<std::basic_string<char> &, boost::fusion::nil>, boost::fusion::vector0<void> >, T2 = bool]
    operator()(BOOST_PP_ENUM_BINARY_PARAMS(N, T, & _)) const
    ^
/usr/include/boost/spirit/home/phoenix/core/actor.hpp:124:9: note: candidate function template not viable: requires single argument '_0', but 3 arguments were provided
        operator()(T0& _0) const
        ^
/usr/include/boost/spirit/home/phoenix/core/actor.hpp:142:9: note: candidate function template not viable: requires 2 arguments, but 3 were provided
        operator()(T0& _0, T1& _1) const
        ^
/usr/include/boost/spirit/home/phoenix/core/detail/actor.hpp:54:5: note: candidate function template not viable: requires 4 arguments, but 3 were provided
    operator()(BOOST_PP_ENUM_BINARY_PARAMS(N, T, & _)) const
    ^
/usr/include/boost/spirit/home/phoenix/core/detail/actor.hpp:54:5: note: candidate function template not viable: requires 5 arguments, but 3 were provided
    operator()(BOOST_PP_ENUM_BINARY_PARAMS(N, T, & _)) const
    ^
/usr/include/boost/spirit/home/phoenix/core/detail/actor.hpp:54:5: note: candidate function template not viable: requires 6 arguments, but 3 were provided
    operator()(BOOST_PP_ENUM_BINARY_PARAMS(N, T, & _)) const
    ^
/usr/include/boost/spirit/home/phoenix/core/detail/actor.hpp:54:5: note: candidate function template not viable: requires 7 arguments, but 3 were provided
    operator()(BOOST_PP_ENUM_BINARY_PARAMS(N, T, & _)) const
    ^
/usr/include/boost/spirit/home/phoenix/core/detail/actor.hpp:54:5: note: candidate function template not viable: requires 8 arguments, but 3 were provided
    operator()(BOOST_PP_ENUM_BINARY_PARAMS(N, T, & _)) const
    ^
/usr/include/boost/spirit/home/phoenix/core/detail/actor.hpp:54:5: note: candidate function template not viable: requires 9 arguments, but 3 were provided
    operator()(BOOST_PP_ENUM_BINARY_PARAMS(N, T, & _)) const
    ^
/usr/include/boost/spirit/home/phoenix/core/detail/actor.hpp:54:5: note: candidate function template not viable: requires 10 arguments, but 3 were provided
    operator()(BOOST_PP_ENUM_BINARY_PARAMS(N, T, & _)) const
    ^
/usr/include/boost/spirit/home/phoenix/core/actor.hpp:107:9: note: candidate function not viable: requires 0 arguments, but 3 were provided
        operator()() const
        ^
In file included from /home/jim/work/mlite/mlite.cpp:29:
In file included from ./pch.hxx:10:
In file included from /usr/include/boost/spirit/include/qi.hpp:16:
In file included from /usr/include/boost/spirit/home/qi.hpp:14:
In file included from /usr/include/boost/spirit/home/qi/action.hpp:14:
In file included from /usr/include/boost/spirit/home/qi/action/action.hpp:14:
In file included from /usr/include/boost/spirit/home/qi/meta_compiler.hpp:15:
In file included from /usr/include/boost/spirit/home/qi/domain.hpp:18:
/usr/include/boost/spirit/home/support/context.hpp:216:13: error: no matching function for call to 'assertion_failed'
            BOOST_SPIRIT_ASSERT_MSG(
            ^~~~~~~~~~~~~~~~~~~~~~~~
/usr/include/boost/spirit/home/support/assert_msg.hpp:31:9: note: expanded from macro 'BOOST_SPIRIT_ASSERT_MSG'
        BOOST_MPL_ASSERT_MSG(Cond, Msg, Types)
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
/usr/include/boost/mpl/assert.hpp:434:48: note: expanded from macro 'BOOST_MPL_ASSERT_MSG'
#define BOOST_MPL_ASSERT_MSG( c, msg, types_ ) \
                                               ^
/usr/include/boost/mpl/assert.hpp:428:9: note: expanded from macro '\
BOOST_MPL_ASSERT_MSG_IMPL'
        boost::mpl::assertion_failed<(c)>( BOOST_PP_CAT(mpl_assert_arg,counter)::assert_arg() ) \
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
/usr/include/boost/mpl/assert.hpp:59:58: note: expanded from macro '\
BOOST_MPL_AUX_ASSERT_CONSTANT'
#   define BOOST_MPL_AUX_ASSERT_CONSTANT(T, expr) enum { expr }
                                                         ^
/usr/include/boost/spirit/home/phoenix/core/detail/function_eval.hpp:108:32: note: in instantiation of template class 'boost::spirit::local_variable<0>::result<boost::phoenix::basic_environment<boost::spirit::unused_type, boost::spirit::context<boost::fusion::cons<std::basic_string<char> &, boost::fusion::nil>, boost::fusion::vector0<void> >, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_> >' requested here
            BOOST_PP_REPEAT(N, PHOENIX_GET_ARG, _)
                               ^
/usr/include/boost/preprocessor/repetition/repeat.hpp:38:60: note: expanded from macro 'BOOST_PP_REPEAT_1'
# define BOOST_PP_REPEAT_1(c, m, d) BOOST_PP_REPEAT_1_I(c, m, d)
                                                           ^
/usr/include/boost/preprocessor/repetition/repeat.hpp:43:63: note: expanded from macro 'BOOST_PP_REPEAT_1_I'
# define BOOST_PP_REPEAT_1_I(c, m, d) BOOST_PP_REPEAT_1_ ## c(m, d)
                                                              ^
/usr/include/boost/preprocessor/repetition/repeat.hpp:52:36: note: expanded from macro 'BOOST_PP_REPEAT_1_1'
# define BOOST_PP_REPEAT_1_1(m, d) m(2, 0, d)
                                   ^
/usr/include/boost/spirit/home/phoenix/core/detail/function_eval.hpp:69:42: note: expanded from macro 'PHOENIX_GET_ARG'
            typename BOOST_PP_CAT(A, n)::template result<Env>::type             \
                                         ^
/usr/include/boost/spirit/home/phoenix/core/detail/composite_eval.hpp:86:50: note: in instantiation of template class 'boost::phoenix::detail::function_eval<1>::result<boost::phoenix::basic_environment<boost::spirit::unused_type, boost::spirit::context<boost::fusion::cons<std::basic_string<char> &, boost::fusion::nil>, boost::fusion::vector0<void> >, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_>, boost::phoenix::value<boost::spirit::terminal<boost::spirit::tag::char_code<boost::spirit::tag::char_, boost::spirit::char_encoding::ascii> > >, boost::spirit::local_variable<0> >' requested here
                    Composite::eval_policy_type::template result<
                                                 ^
/usr/include/boost/spirit/home/phoenix/core/composite.hpp:60:17: note: in instantiation of template class 'boost::phoenix::detail::composite_eval<2>::result<boost::phoenix::composite<boost::phoenix::detail::function_eval<1>, boost::fusion::vector<boost::phoenix::value<boost::spirit::terminal<boost::spirit::tag::char_code<boost::spirit::tag::char_, boost::spirit::char_encoding::ascii> > >, boost::spirit::local_variable<0>, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_> >, boost::phoenix::basic_environment<boost::spirit::unused_type, boost::spirit::context<boost::fusion::cons<std::basic_string<char> &, boost::fusion::nil>, boost::fusion::vector0<void> >, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_> >' requested here
                template result<self_type, Env>::type
                ^
/usr/include/boost/spirit/home/phoenix/core/actor.hpp:56:32: note: in instantiation of template class 'boost::phoenix::composite<boost::phoenix::detail::function_eval<1>, boost::fusion::vector<boost::phoenix::value<boost::spirit::terminal<boost::spirit::tag::char_code<boost::spirit::tag::char_, boost::spirit::char_encoding::ascii> > >, boost::spirit::local_variable<0>, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_> >::result<boost::phoenix::basic_environment<boost::spirit::unused_type, boost::spirit::context<boost::fusion::cons<std::basic_string<char> &, boost::fusion::nil>, boost::fusion::vector0<void> >, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_> >' requested here
        typedef typename Eval::template result<Env>::type type;
                               ^
/usr/include/boost/spirit/home/phoenix/core/actor.hpp:131:13: note: in instantiation of template class 'boost::phoenix::eval_result<boost::phoenix::composite<boost::phoenix::detail::function_eval<1>, boost::fusion::vector<boost::phoenix::value<boost::spirit::terminal<boost::spirit::tag::char_code<boost::spirit::tag::char_, boost::spirit::char_encoding::ascii> > >, boost::spirit::local_variable<0>, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_> >, boost::phoenix::basic_environment<boost::spirit::unused_type, boost::spirit::context<boost::fusion::cons<std::basic_string<char> &, boost::fusion::nil>, boost::fusion::vector0<void> >, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_> >' requested here
          : eval_result<
            ^
/usr/include/boost/utility/result_of.hpp:173:34: note: (skipping 33 contexts in backtrace; use -ftemplate-backtrace-limit=0 to see all)
struct result_of_nested_result : F::template result<FArgs>
                                 ^
/usr/include/boost/function/function_template.hpp:1069:5: note: in instantiation of function template specialization 'boost::function4<bool, __gnu_cxx::__normal_iterator<const char *, std::basic_string<char> > &, const __gnu_cxx::__normal_iterator<const char *, std::basic_string<char> > &, boost::spirit::context<boost::fusion::cons<std::basic_string<char> &, boost::fusion::nil>, boost::fusion::vector0<void> > &, const boost::spirit::qi::char_class<boost::spirit::tag::char_code<boost::spirit::tag::space, boost::spirit::char_encoding::ascii> > &>::function4<boost::spirit::qi::detail::parser_binder<boost::spirit::qi::sequence<boost::fusion::cons<boost::spirit::qi::omit_directive<boost::spirit::qi::action<boost::spirit::qi::literal_char<boost::spirit::char_encoding::ascii, false, false>, boost::phoenix::actor<boost::phoenix::composite<boost::phoenix::assign_eval, boost::fusion::vector<boost::spirit::local_variable<0>, boost::spirit::argument<0>, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_> > > > >, boost::fusion::cons<boost::spirit::qi::no_skip_directive<boost::spirit::qi::kleene<boost::spirit::qi::difference<boost::spirit::qi::char_class<boost::spirit::tag::char_code<boost::spirit::tag::char_, boost::spirit::char_encoding::ascii> >, boost::spirit::qi::lazy_parser<boost::phoenix::actor<boost::phoenix::composite<boost::phoenix::detail::function_eval<1>, boost::fusion::vector<boost::phoenix::value<boost::spirit::terminal<boost::spirit::tag::char_code<boost::spirit::tag::char_, boost::spirit::char_encoding::ascii> > >, boost::spirit::local_variable<0>, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_> > >, boost::spirit::unused_type> > > >, boost::fusion::cons<boost::spirit::qi::lazy_parser<boost::phoenix::actor<boost::phoenix::composite<boost::phoenix::detail::function_eval<1>, boost::fusion::vector<boost::phoenix::value<boost::spirit::terminal<boost::spirit::tag::lit> >, boost::spirit::local_variable<0>, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_> > >, boost::spirit::unused_type>, boost::fusion::nil> > > >, mpl_::bool_<false> > >' requested here
    base_type(f)
    ^
/usr/include/boost/function/function_template.hpp:1124:5: note: in instantiation of function template specialization 'boost::function<bool (__gnu_cxx::__normal_iterator<const char *, std::basic_string<char> > &, const __gnu_cxx::__normal_iterator<const char *, std::basic_string<char> > &, boost::spirit::context<boost::fusion::cons<std::basic_string<char> &, boost::fusion::nil>, boost::fusion::vector0<void> > &, const boost::spirit::qi::char_class<boost::spirit::tag::char_code<boost::spirit::tag::space, boost::spirit::char_encoding::ascii> > &)>::function<boost::spirit::qi::detail::parser_binder<boost::spirit::qi::sequence<boost::fusion::cons<boost::spirit::qi::omit_directive<boost::spirit::qi::action<boost::spirit::qi::literal_char<boost::spirit::char_encoding::ascii, false, false>, boost::phoenix::actor<boost::phoenix::composite<boost::phoenix::assign_eval, boost::fusion::vector<boost::spirit::local_variable<0>, boost::spirit::argument<0>, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_> > > > >, boost::fusion::cons<boost::spirit::qi::no_skip_directive<boost::spirit::qi::kleene<boost::spirit::qi::difference<boost::spirit::qi::char_class<boost::spirit::tag::char_code<boost::spirit::tag::char_, boost::spirit::char_encoding::ascii> >, boost::spirit::qi::lazy_parser<boost::phoenix::actor<boost::phoenix::composite<boost::phoenix::detail::function_eval<1>, boost::fusion::vector<boost::phoenix::value<boost::spirit::terminal<boost::spirit::tag::char_code<boost::spirit::tag::char_, boost::spirit::char_encoding::ascii> > >, boost::spirit::local_variable<0>, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_> > >, boost::spirit::unused_type> > > >, boost::fusion::cons<boost::spirit::qi::lazy_parser<boost::phoenix::actor<boost::phoenix::composite<boost::phoenix::detail::function_eval<1>, boost::fusion::vector<boost::phoenix::value<boost::spirit::terminal<boost::spirit::tag::lit> >, boost::spirit::local_variable<0>, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_> > >, boost::spirit::unused_type>, boost::fusion::nil> > > >, mpl_::bool_<false> > >' requested here
    self_type(f).swap(*this);
    ^
/usr/include/boost/spirit/home/qi/nonterminal/rule.hpp:182:19: note: in instantiation of function template specialization 'boost::function<bool (__gnu_cxx::__normal_iterator<const char *, std::basic_string<char> > &, const __gnu_cxx::__normal_iterator<const char *, std::basic_string<char> > &, boost::spirit::context<boost::fusion::cons<std::basic_string<char> &, boost::fusion::nil>, boost::fusion::vector0<void> > &, const boost::spirit::qi::char_class<boost::spirit::tag::char_code<boost::spirit::tag::space, boost::spirit::char_encoding::ascii> > &)>::operator=<boost::spirit::qi::detail::parser_binder<boost::spirit::qi::sequence<boost::fusion::cons<boost::spirit::qi::omit_directive<boost::spirit::qi::action<boost::spirit::qi::literal_char<boost::spirit::char_encoding::ascii, false, false>, boost::phoenix::actor<boost::phoenix::composite<boost::phoenix::assign_eval, boost::fusion::vector<boost::spirit::local_variable<0>, boost::spirit::argument<0>, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_> > > > >, boost::fusion::cons<boost::spirit::qi::no_skip_directive<boost::spirit::qi::kleene<boost::spirit::qi::difference<boost::spirit::qi::char_class<boost::spirit::tag::char_code<boost::spirit::tag::char_, boost::spirit::char_encoding::ascii> >, boost::spirit::qi::lazy_parser<boost::phoenix::actor<boost::phoenix::composite<boost::phoenix::detail::function_eval<1>, boost::fusion::vector<boost::phoenix::value<boost::spirit::terminal<boost::spirit::tag::char_code<boost::spirit::tag::char_, boost::spirit::char_encoding::ascii> > >, boost::spirit::local_variable<0>, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_> > >, boost::spirit::unused_type> > > >, boost::fusion::cons<boost::spirit::qi::lazy_parser<boost::phoenix::actor<boost::phoenix::composite<boost::phoenix::detail::function_eval<1>, boost::fusion::vector<boost::phoenix::value<boost::spirit::terminal<boost::spirit::tag::lit> >, boost::spirit::local_variable<0>, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_> > >, boost::spirit::unused_type>, boost::fusion::nil> > > >, mpl_::bool_<false> > >' requested here
            lhs.f = detail::bind_parser<Auto>(
                  ^
/usr/include/boost/spirit/home/qi/nonterminal/rule.hpp:191:13: note: in instantiation of function template specialization 'boost::spirit::qi::rule<__gnu_cxx::__normal_iterator<const char *, std::basic_string<char> >, std::basic_string<char> (), boost::proto::exprns_::expr<boost::proto::tagns_::tag::terminal, boost::proto::argsns_::term<boost::spirit::tag::char_code<boost::spirit::tag::space, boost::spirit::char_encoding::ascii> >, 0>, boost::spirit::unused_type, boost::spirit::unused_type>::define<mpl_::bool_<false>, boost::proto::exprns_::expr<boost::proto::tagns_::tag::shift_right, boost::proto::argsns_::list2<const boost::proto::exprns_::expr<boost::proto::tagns_::tag::shift_right, boost::proto::argsns_::list2<const boost::proto::exprns_::expr<boost::proto::tagns_::tag::subscript, boost::proto::argsns_::list2<const boost::proto::exprns_::expr<boost::proto::tagns_::tag::terminal, boost::proto::argsns_::term<boost::spirit::tag::omit>, 0> &, const boost::proto::exprns_::expr<boost::proto::tagns_::tag::subscript, boost::proto::argsns_::list2<boost::proto::exprns_::expr<boost::proto::tagns_::tag::terminal, boost::proto::argsns_::term<boost::spirit::terminal_ex<boost::spirit::tag::char_code<boost::spirit::tag::char_, boost::spirit::char_encoding::ascii>, boost::fusion::vector1<char const (&)[2]> > >, 0> &, boost::proto::exprns_::expr<boost::proto::tagns_::tag::terminal, boost::proto::argsns_::term<const boost::phoenix::actor<boost::phoenix::composite<boost::phoenix::assign_eval, boost::fusion::vector<boost::spirit::local_variable<0>, boost::spirit::argument<0>, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_> > > &>, 0> >, 2> &>, 2> &, const boost::proto::exprns_::expr<boost::proto::tagns_::tag::subscript, boost::proto::argsns_::list2<const boost::proto::exprns_::expr<boost::proto::tagns_::tag::terminal, boost::proto::argsns_::term<boost::spirit::tag::no_skip>, 0> &, const boost::proto::exprns_::expr<boost::proto::tagns_::tag::dereference, boost::proto::argsns_::list1<const boost::proto::exprns_::expr<boost::proto::tagns_::tag::minus, boost::proto::argsns_::list2<const boost::spirit::terminal<boost::spirit::tag::char_code<boost::spirit::tag::char_, boost::spirit::char_encoding::ascii> > &, const boost::proto::exprns_::expr<boost::proto::tagns_::tag::terminal, boost::proto::argsns_::term<boost::spirit::lazy_terminal<boost::spirit::tag::char_code<boost::spirit::tag::char_, boost::spirit::char_encoding::ascii>, boost::phoenix::actor<boost::phoenix::composite<boost::phoenix::detail::function_eval<1>, boost::fusion::vector<boost::phoenix::value<boost::spirit::terminal<boost::spirit::tag::char_code<boost::spirit::tag::char_, boost::spirit::char_encoding::ascii> > >, boost::spirit::local_variable<0>, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_> > >, 1> >, 0> &>, 2> &>, 1> &>, 2> &>, 2> &, const boost::proto::exprns_::expr<boost::proto::tagns_::tag::terminal, boost::proto::argsns_::term<boost::spirit::lazy_terminal<boost::spirit::tag::lit, boost::phoenix::actor<boost::phoenix::composite<boost::phoenix::detail::function_eval<1>, boost::fusion::vector<boost::phoenix::value<boost::spirit::terminal<boost::spirit::tag::lit> >, boost::spirit::local_variable<0>, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_> > >, 1> >, 0> &>, 2> >' requested here
            define<mpl::false_>(*this, expr, traits::matches<qi::domain, Expr>());
            ^
/home/jim/work/mlite/mlite.cpp:99:63: note: in instantiation of function template specialization 'boost::spirit::qi::rule<__gnu_cxx::__normal_iterator<const char *, std::basic_string<char> >, std::basic_string<char> (), boost::proto::exprns_::expr<boost::proto::tagns_::tag::terminal, boost::proto::argsns_::term<boost::spirit::tag::char_code<boost::spirit::tag::space, boost::spirit::char_encoding::ascii> >, 0>, boost::spirit::unused_type, boost::spirit::unused_type>::rule<boost::proto::exprns_::expr<boost::proto::tagns_::tag::shift_right, boost::proto::argsns_::list2<const boost::proto::exprns_::expr<boost::proto::tagns_::tag::shift_right, boost::proto::argsns_::list2<const boost::proto::exprns_::expr<boost::proto::tagns_::tag::subscript, boost::proto::argsns_::list2<const boost::proto::exprns_::expr<boost::proto::tagns_::tag::terminal, boost::proto::argsns_::term<boost::spirit::tag::omit>, 0> &, const boost::proto::exprns_::expr<boost::proto::tagns_::tag::subscript, boost::proto::argsns_::list2<boost::proto::exprns_::expr<boost::proto::tagns_::tag::terminal, boost::proto::argsns_::term<boost::spirit::terminal_ex<boost::spirit::tag::char_code<boost::spirit::tag::char_, boost::spirit::char_encoding::ascii>, boost::fusion::vector1<char const (&)[2]> > >, 0> &, boost::proto::exprns_::expr<boost::proto::tagns_::tag::terminal, boost::proto::argsns_::term<const boost::phoenix::actor<boost::phoenix::composite<boost::phoenix::assign_eval, boost::fusion::vector<boost::spirit::local_variable<0>, boost::spirit::argument<0>, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_> > > &>, 0> >, 2> &>, 2> &, const boost::proto::exprns_::expr<boost::proto::tagns_::tag::subscript, boost::proto::argsns_::list2<const boost::proto::exprns_::expr<boost::proto::tagns_::tag::terminal, boost::proto::argsns_::term<boost::spirit::tag::no_skip>, 0> &, const boost::proto::exprns_::expr<boost::proto::tagns_::tag::dereference, boost::proto::argsns_::list1<const boost::proto::exprns_::expr<boost::proto::tagns_::tag::minus, boost::proto::argsns_::list2<const boost::spirit::terminal<boost::spirit::tag::char_code<boost::spirit::tag::char_, boost::spirit::char_encoding::ascii> > &, const boost::proto::exprns_::expr<boost::proto::tagns_::tag::terminal, boost::proto::argsns_::term<boost::spirit::lazy_terminal<boost::spirit::tag::char_code<boost::spirit::tag::char_, boost::spirit::char_encoding::ascii>, boost::phoenix::actor<boost::phoenix::composite<boost::phoenix::detail::function_eval<1>, boost::fusion::vector<boost::phoenix::value<boost::spirit::terminal<boost::spirit::tag::char_code<boost::spirit::tag::char_, boost::spirit::char_encoding::ascii> > >, boost::spirit::local_variable<0>, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_> > >, 1> >, 0> &>, 2> &>, 1> &>, 2> &>, 2> &, const boost::proto::exprns_::expr<boost::proto::tagns_::tag::terminal, boost::proto::argsns_::term<boost::spirit::lazy_terminal<boost::spirit::tag::lit, boost::phoenix::actor<boost::phoenix::composite<boost::phoenix::detail::function_eval<1>, boost::fusion::vector<boost::phoenix::value<boost::spirit::terminal<boost::spirit::tag::lit> >, boost::spirit::local_variable<0>, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_> > >, 1> >, 0> &>, 2> >' requested here
qi::rule<Iterator, std::string(), space_type> IDENT, STRING = omit [ char_("\"") [_a =_1] ] >> no_skip [ *(char_ - char_(_a)) ] >> lit(_a) ;
                                                              ^
/usr/include/boost/mpl/assert.hpp:82:5: note: candidate function [with C = false] not viable: no known conversion from 'boost::mpl::failed ************(boost::spirit::local_variable<0>::result<boost::phoenix::basic_environment<boost::spirit::unused_type, boost::spirit::context<boost::fusion::cons<std::basic_string<char> &, boost::fusion::nil>, boost::fusion::vector0<void> >, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_> >::index_is_out_of_bounds::************)()' to 'typename assert<false>::type' (aka 'mpl_::assert<false>') for 1st argument
int assertion_failed( typename assert<C>::type );
    ^
In file included from /home/jim/work/mlite/mlite.cpp:29:
In file included from ./pch.hxx:10:
In file included from /usr/include/boost/spirit/include/qi.hpp:16:
In file included from /usr/include/boost/spirit/home/qi.hpp:16:
In file included from /usr/include/boost/spirit/home/qi/auxiliary.hpp:16:
/usr/include/boost/spirit/home/qi/auxiliary/lazy.hpp:103:13: error: no matching function for call to 'assertion_failed'
            BOOST_SPIRIT_ASSERT_MATCH(qi::domain, expr_type);
            ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
/usr/include/boost/spirit/home/support/assert_msg.hpp:35:9: note: expanded from macro 'BOOST_SPIRIT_ASSERT_MATCH'
        BOOST_SPIRIT_ASSERT_MSG((                                             \
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
/usr/include/boost/spirit/home/support/assert_msg.hpp:31:9: note: expanded from macro 'BOOST_SPIRIT_ASSERT_MSG'
        BOOST_MPL_ASSERT_MSG(Cond, Msg, Types)
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
/usr/include/boost/mpl/assert.hpp:434:48: note: expanded from macro 'BOOST_MPL_ASSERT_MSG'
#define BOOST_MPL_ASSERT_MSG( c, msg, types_ ) \
                                               ^
/usr/include/boost/mpl/assert.hpp:428:9: note: expanded from macro '\
BOOST_MPL_ASSERT_MSG_IMPL'
        boost::mpl::assertion_failed<(c)>( BOOST_PP_CAT(mpl_assert_arg,counter)::assert_arg() ) \
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
/usr/include/boost/mpl/assert.hpp:59:58: note: expanded from macro '\
BOOST_MPL_AUX_ASSERT_CONSTANT'
#   define BOOST_MPL_AUX_ASSERT_CONSTANT(T, expr) enum { expr }
                                                         ^
/usr/include/boost/spirit/home/qi/auxiliary/lazy.hpp:270:55: note: in instantiation of template class 'boost::spirit::qi::lazy_parser<boost::phoenix::actor<boost::phoenix::composite<boost::phoenix::detail::function_eval<1>, boost::fusion::vector<boost::phoenix::value<boost::spirit::terminal<boost::spirit::tag::char_code<boost::spirit::tag::char_, boost::spirit::char_encoding::ascii> > >, boost::spirit::local_variable<0>, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_> > >, boost::spirit::unused_type>::attribute<boost::spirit::context<boost::fusion::cons<std::basic_string<char> &, boost::fusion::nil>, boost::fusion::vector0<void> >, __gnu_cxx::__normal_iterator<const char *, std::basic_string<char> > >' requested here
          typename qi::lazy_parser<Actor, Modifiers>::template
                                                      ^
/usr/include/boost/mpl/aux_/nested_type_wknd.hpp:27:7: note: in instantiation of template class 'boost::spirit::traits::handles_container<boost::spirit::qi::lazy_parser<boost::phoenix::actor<boost::phoenix::composite<boost::phoenix::detail::function_eval<1>, boost::fusion::vector<boost::phoenix::value<boost::spirit::terminal<boost::spirit::tag::char_code<boost::spirit::tag::char_, boost::spirit::char_encoding::ascii> > >, boost::spirit::local_variable<0>, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_> > >, boost::spirit::unused_type>, std::basic_string<char>, boost::spirit::context<boost::fusion::cons<std::basic_string<char> &, boost::fusion::nil>, boost::fusion::vector0<void> >, __gnu_cxx::__normal_iterator<const char *, std::basic_string<char> >, void>' requested here
    : T::type
      ^
/usr/include/boost/mpl/aux_/preprocessed/gcc/or.hpp:25:11: note: in instantiation of template class 'boost::mpl::aux::nested_type_wknd<boost::spirit::traits::handles_container<boost::spirit::qi::lazy_parser<boost::phoenix::actor<boost::phoenix::composite<boost::phoenix::detail::function_eval<1>, boost::fusion::vector<boost::phoenix::value<boost::spirit::terminal<boost::spirit::tag::char_code<boost::spirit::tag::char_, boost::spirit::char_encoding::ascii> > >, boost::spirit::local_variable<0>, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_> > >, boost::spirit::unused_type>, std::basic_string<char>, boost::spirit::context<boost::fusion::cons<std::basic_string<char> &, boost::fusion::nil>, boost::fusion::vector0<void> >, __gnu_cxx::__normal_iterator<const char *, std::basic_string<char> >, void> >' requested here
          BOOST_MPL_AUX_NESTED_TYPE_WKND(T1)::value
          ^
/usr/include/boost/mpl/aux_/nested_type_wknd.hpp:38:24: note: expanded from macro 'BOOST_MPL_AUX_NESTED_TYPE_WKND'
    ::boost::mpl::aux::nested_type_wknd<T> \
                       ^
/usr/include/boost/mpl/aux_/preprocessed/gcc/or.hpp:50:7: note: in instantiation of template class 'boost::mpl::aux::or_impl<false, boost::spirit::traits::handles_container<boost::spirit::qi::lazy_parser<boost::phoenix::actor<boost::phoenix::composite<boost::phoenix::detail::function_eval<1>, boost::fusion::vector<boost::phoenix::value<boost::spirit::terminal<boost::spirit::tag::char_code<boost::spirit::tag::char_, boost::spirit::char_encoding::ascii> > >, boost::spirit::local_variable<0>, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_> > >, boost::spirit::unused_type>, std::basic_string<char>, boost::spirit::context<boost::fusion::cons<std::basic_string<char> &, boost::fusion::nil>, boost::fusion::vector0<void> >, __gnu_cxx::__normal_iterator<const char *, std::basic_string<char> >, void>, mpl_::bool_<false>, mpl_::bool_<false>, mpl_::bool_<false> >' requested here
    : aux::or_impl<
      ^
/usr/include/boost/spirit/home/support/handles_container.hpp:37:9: note: in instantiation of template class 'boost::mpl::or_<boost::spirit::traits::handles_container<boost::spirit::qi::char_class<boost::spirit::tag::char_code<boost::spirit::tag::char_, boost::spirit::char_encoding::ascii> >, std::basic_string<char>, boost::spirit::context<boost::fusion::cons<std::basic_string<char> &, boost::fusion::nil>, boost::fusion::vector0<void> >, __gnu_cxx::__normal_iterator<const char *, std::basic_string<char> >, void>, boost::spirit::traits::handles_container<boost::spirit::qi::lazy_parser<boost::phoenix::actor<boost::phoenix::composite<boost::phoenix::detail::function_eval<1>, boost::fusion::vector<boost::phoenix::value<boost::spirit::terminal<boost::spirit::tag::char_code<boost::spirit::tag::char_, boost::spirit::char_encoding::ascii> > >, boost::spirit::local_variable<0>, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_> > >, boost::spirit::unused_type>, std::basic_string<char>, boost::spirit::context<boost::fusion::cons<std::basic_string<char> &, boost::fusion::nil>, boost::fusion::vector0<void> >, __gnu_cxx::__normal_iterator<const char *, std::basic_string<char> >, void>, mpl_::bool_<false>, mpl_::bool_<false>, mpl_::bool_<false> >' requested here
      : mpl::or_<
        ^
/usr/include/boost/spirit/home/qi/operator/difference.hpp:109:9: note: (skipping 23 contexts in backtrace; use -ftemplate-backtrace-limit=0 to see all)
      : binary_handles_container<Left, Right, Attribute, Context, Iterator> {};
        ^
/usr/include/boost/function/function_template.hpp:1069:5: note: in instantiation of function template specialization 'boost::function4<bool, __gnu_cxx::__normal_iterator<const char *, std::basic_string<char> > &, const __gnu_cxx::__normal_iterator<const char *, std::basic_string<char> > &, boost::spirit::context<boost::fusion::cons<std::basic_string<char> &, boost::fusion::nil>, boost::fusion::vector0<void> > &, const boost::spirit::qi::char_class<boost::spirit::tag::char_code<boost::spirit::tag::space, boost::spirit::char_encoding::ascii> > &>::function4<boost::spirit::qi::detail::parser_binder<boost::spirit::qi::sequence<boost::fusion::cons<boost::spirit::qi::omit_directive<boost::spirit::qi::action<boost::spirit::qi::literal_char<boost::spirit::char_encoding::ascii, false, false>, boost::phoenix::actor<boost::phoenix::composite<boost::phoenix::assign_eval, boost::fusion::vector<boost::spirit::local_variable<0>, boost::spirit::argument<0>, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_> > > > >, boost::fusion::cons<boost::spirit::qi::no_skip_directive<boost::spirit::qi::kleene<boost::spirit::qi::difference<boost::spirit::qi::char_class<boost::spirit::tag::char_code<boost::spirit::tag::char_, boost::spirit::char_encoding::ascii> >, boost::spirit::qi::lazy_parser<boost::phoenix::actor<boost::phoenix::composite<boost::phoenix::detail::function_eval<1>, boost::fusion::vector<boost::phoenix::value<boost::spirit::terminal<boost::spirit::tag::char_code<boost::spirit::tag::char_, boost::spirit::char_encoding::ascii> > >, boost::spirit::local_variable<0>, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_> > >, boost::spirit::unused_type> > > >, boost::fusion::cons<boost::spirit::qi::lazy_parser<boost::phoenix::actor<boost::phoenix::composite<boost::phoenix::detail::function_eval<1>, boost::fusion::vector<boost::phoenix::value<boost::spirit::terminal<boost::spirit::tag::lit> >, boost::spirit::local_variable<0>, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_> > >, boost::spirit::unused_type>, boost::fusion::nil> > > >, mpl_::bool_<false> > >' requested here
    base_type(f)
    ^
/usr/include/boost/function/function_template.hpp:1124:5: note: in instantiation of function template specialization 'boost::function<bool (__gnu_cxx::__normal_iterator<const char *, std::basic_string<char> > &, const __gnu_cxx::__normal_iterator<const char *, std::basic_string<char> > &, boost::spirit::context<boost::fusion::cons<std::basic_string<char> &, boost::fusion::nil>, boost::fusion::vector0<void> > &, const boost::spirit::qi::char_class<boost::spirit::tag::char_code<boost::spirit::tag::space, boost::spirit::char_encoding::ascii> > &)>::function<boost::spirit::qi::detail::parser_binder<boost::spirit::qi::sequence<boost::fusion::cons<boost::spirit::qi::omit_directive<boost::spirit::qi::action<boost::spirit::qi::literal_char<boost::spirit::char_encoding::ascii, false, false>, boost::phoenix::actor<boost::phoenix::composite<boost::phoenix::assign_eval, boost::fusion::vector<boost::spirit::local_variable<0>, boost::spirit::argument<0>, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_> > > > >, boost::fusion::cons<boost::spirit::qi::no_skip_directive<boost::spirit::qi::kleene<boost::spirit::qi::difference<boost::spirit::qi::char_class<boost::spirit::tag::char_code<boost::spirit::tag::char_, boost::spirit::char_encoding::ascii> >, boost::spirit::qi::lazy_parser<boost::phoenix::actor<boost::phoenix::composite<boost::phoenix::detail::function_eval<1>, boost::fusion::vector<boost::phoenix::value<boost::spirit::terminal<boost::spirit::tag::char_code<boost::spirit::tag::char_, boost::spirit::char_encoding::ascii> > >, boost::spirit::local_variable<0>, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_> > >, boost::spirit::unused_type> > > >, boost::fusion::cons<boost::spirit::qi::lazy_parser<boost::phoenix::actor<boost::phoenix::composite<boost::phoenix::detail::function_eval<1>, boost::fusion::vector<boost::phoenix::value<boost::spirit::terminal<boost::spirit::tag::lit> >, boost::spirit::local_variable<0>, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_> > >, boost::spirit::unused_type>, boost::fusion::nil> > > >, mpl_::bool_<false> > >' requested here
    self_type(f).swap(*this);
    ^
/usr/include/boost/spirit/home/qi/nonterminal/rule.hpp:182:19: note: in instantiation of function template specialization 'boost::function<bool (__gnu_cxx::__normal_iterator<const char *, std::basic_string<char> > &, const __gnu_cxx::__normal_iterator<const char *, std::basic_string<char> > &, boost::spirit::context<boost::fusion::cons<std::basic_string<char> &, boost::fusion::nil>, boost::fusion::vector0<void> > &, const boost::spirit::qi::char_class<boost::spirit::tag::char_code<boost::spirit::tag::space, boost::spirit::char_encoding::ascii> > &)>::operator=<boost::spirit::qi::detail::parser_binder<boost::spirit::qi::sequence<boost::fusion::cons<boost::spirit::qi::omit_directive<boost::spirit::qi::action<boost::spirit::qi::literal_char<boost::spirit::char_encoding::ascii, false, false>, boost::phoenix::actor<boost::phoenix::composite<boost::phoenix::assign_eval, boost::fusion::vector<boost::spirit::local_variable<0>, boost::spirit::argument<0>, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_> > > > >, boost::fusion::cons<boost::spirit::qi::no_skip_directive<boost::spirit::qi::kleene<boost::spirit::qi::difference<boost::spirit::qi::char_class<boost::spirit::tag::char_code<boost::spirit::tag::char_, boost::spirit::char_encoding::ascii> >, boost::spirit::qi::lazy_parser<boost::phoenix::actor<boost::phoenix::composite<boost::phoenix::detail::function_eval<1>, boost::fusion::vector<boost::phoenix::value<boost::spirit::terminal<boost::spirit::tag::char_code<boost::spirit::tag::char_, boost::spirit::char_encoding::ascii> > >, boost::spirit::local_variable<0>, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_> > >, boost::spirit::unused_type> > > >, boost::fusion::cons<boost::spirit::qi::lazy_parser<boost::phoenix::actor<boost::phoenix::composite<boost::phoenix::detail::function_eval<1>, boost::fusion::vector<boost::phoenix::value<boost::spirit::terminal<boost::spirit::tag::lit> >, boost::spirit::local_variable<0>, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_> > >, boost::spirit::unused_type>, boost::fusion::nil> > > >, mpl_::bool_<false> > >' requested here
            lhs.f = detail::bind_parser<Auto>(
                  ^
/usr/include/boost/spirit/home/qi/nonterminal/rule.hpp:191:13: note: in instantiation of function template specialization 'boost::spirit::qi::rule<__gnu_cxx::__normal_iterator<const char *, std::basic_string<char> >, std::basic_string<char> (), boost::proto::exprns_::expr<boost::proto::tagns_::tag::terminal, boost::proto::argsns_::term<boost::spirit::tag::char_code<boost::spirit::tag::space, boost::spirit::char_encoding::ascii> >, 0>, boost::spirit::unused_type, boost::spirit::unused_type>::define<mpl_::bool_<false>, boost::proto::exprns_::expr<boost::proto::tagns_::tag::shift_right, boost::proto::argsns_::list2<const boost::proto::exprns_::expr<boost::proto::tagns_::tag::shift_right, boost::proto::argsns_::list2<const boost::proto::exprns_::expr<boost::proto::tagns_::tag::subscript, boost::proto::argsns_::list2<const boost::proto::exprns_::expr<boost::proto::tagns_::tag::terminal, boost::proto::argsns_::term<boost::spirit::tag::omit>, 0> &, const boost::proto::exprns_::expr<boost::proto::tagns_::tag::subscript, boost::proto::argsns_::list2<boost::proto::exprns_::expr<boost::proto::tagns_::tag::terminal, boost::proto::argsns_::term<boost::spirit::terminal_ex<boost::spirit::tag::char_code<boost::spirit::tag::char_, boost::spirit::char_encoding::ascii>, boost::fusion::vector1<char const (&)[2]> > >, 0> &, boost::proto::exprns_::expr<boost::proto::tagns_::tag::terminal, boost::proto::argsns_::term<const boost::phoenix::actor<boost::phoenix::composite<boost::phoenix::assign_eval, boost::fusion::vector<boost::spirit::local_variable<0>, boost::spirit::argument<0>, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_> > > &>, 0> >, 2> &>, 2> &, const boost::proto::exprns_::expr<boost::proto::tagns_::tag::subscript, boost::proto::argsns_::list2<const boost::proto::exprns_::expr<boost::proto::tagns_::tag::terminal, boost::proto::argsns_::term<boost::spirit::tag::no_skip>, 0> &, const boost::proto::exprns_::expr<boost::proto::tagns_::tag::dereference, boost::proto::argsns_::list1<const boost::proto::exprns_::expr<boost::proto::tagns_::tag::minus, boost::proto::argsns_::list2<const boost::spirit::terminal<boost::spirit::tag::char_code<boost::spirit::tag::char_, boost::spirit::char_encoding::ascii> > &, const boost::proto::exprns_::expr<boost::proto::tagns_::tag::terminal, boost::proto::argsns_::term<boost::spirit::lazy_terminal<boost::spirit::tag::char_code<boost::spirit::tag::char_, boost::spirit::char_encoding::ascii>, boost::phoenix::actor<boost::phoenix::composite<boost::phoenix::detail::function_eval<1>, boost::fusion::vector<boost::phoenix::value<boost::spirit::terminal<boost::spirit::tag::char_code<boost::spirit::tag::char_, boost::spirit::char_encoding::ascii> > >, boost::spirit::local_variable<0>, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_> > >, 1> >, 0> &>, 2> &>, 1> &>, 2> &>, 2> &, const boost::proto::exprns_::expr<boost::proto::tagns_::tag::terminal, boost::proto::argsns_::term<boost::spirit::lazy_terminal<boost::spirit::tag::lit, boost::phoenix::actor<boost::phoenix::composite<boost::phoenix::detail::function_eval<1>, boost::fusion::vector<boost::phoenix::value<boost::spirit::terminal<boost::spirit::tag::lit> >, boost::spirit::local_variable<0>, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_> > >, 1> >, 0> &>, 2> >' requested here
            define<mpl::false_>(*this, expr, traits::matches<qi::domain, Expr>());
            ^
/home/jim/work/mlite/mlite.cpp:99:63: note: in instantiation of function template specialization 'boost::spirit::qi::rule<__gnu_cxx::__normal_iterator<const char *, std::basic_string<char> >, std::basic_string<char> (), boost::proto::exprns_::expr<boost::proto::tagns_::tag::terminal, boost::proto::argsns_::term<boost::spirit::tag::char_code<boost::spirit::tag::space, boost::spirit::char_encoding::ascii> >, 0>, boost::spirit::unused_type, boost::spirit::unused_type>::rule<boost::proto::exprns_::expr<boost::proto::tagns_::tag::shift_right, boost::proto::argsns_::list2<const boost::proto::exprns_::expr<boost::proto::tagns_::tag::shift_right, boost::proto::argsns_::list2<const boost::proto::exprns_::expr<boost::proto::tagns_::tag::subscript, boost::proto::argsns_::list2<const boost::proto::exprns_::expr<boost::proto::tagns_::tag::terminal, boost::proto::argsns_::term<boost::spirit::tag::omit>, 0> &, const boost::proto::exprns_::expr<boost::proto::tagns_::tag::subscript, boost::proto::argsns_::list2<boost::proto::exprns_::expr<boost::proto::tagns_::tag::terminal, boost::proto::argsns_::term<boost::spirit::terminal_ex<boost::spirit::tag::char_code<boost::spirit::tag::char_, boost::spirit::char_encoding::ascii>, boost::fusion::vector1<char const (&)[2]> > >, 0> &, boost::proto::exprns_::expr<boost::proto::tagns_::tag::terminal, boost::proto::argsns_::term<const boost::phoenix::actor<boost::phoenix::composite<boost::phoenix::assign_eval, boost::fusion::vector<boost::spirit::local_variable<0>, boost::spirit::argument<0>, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_> > > &>, 0> >, 2> &>, 2> &, const boost::proto::exprns_::expr<boost::proto::tagns_::tag::subscript, boost::proto::argsns_::list2<const boost::proto::exprns_::expr<boost::proto::tagns_::tag::terminal, boost::proto::argsns_::term<boost::spirit::tag::no_skip>, 0> &, const boost::proto::exprns_::expr<boost::proto::tagns_::tag::dereference, boost::proto::argsns_::list1<const boost::proto::exprns_::expr<boost::proto::tagns_::tag::minus, boost::proto::argsns_::list2<const boost::spirit::terminal<boost::spirit::tag::char_code<boost::spirit::tag::char_, boost::spirit::char_encoding::ascii> > &, const boost::proto::exprns_::expr<boost::proto::tagns_::tag::terminal, boost::proto::argsns_::term<boost::spirit::lazy_terminal<boost::spirit::tag::char_code<boost::spirit::tag::char_, boost::spirit::char_encoding::ascii>, boost::phoenix::actor<boost::phoenix::composite<boost::phoenix::detail::function_eval<1>, boost::fusion::vector<boost::phoenix::value<boost::spirit::terminal<boost::spirit::tag::char_code<boost::spirit::tag::char_, boost::spirit::char_encoding::ascii> > >, boost::spirit::local_variable<0>, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_> > >, 1> >, 0> &>, 2> &>, 1> &>, 2> &>, 2> &, const boost::proto::exprns_::expr<boost::proto::tagns_::tag::terminal, boost::proto::argsns_::term<boost::spirit::lazy_terminal<boost::spirit::tag::lit, boost::phoenix::actor<boost::phoenix::composite<boost::phoenix::detail::function_eval<1>, boost::fusion::vector<boost::phoenix::value<boost::spirit::terminal<boost::spirit::tag::lit> >, boost::spirit::local_variable<0>, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_> > >, 1> >, 0> &>, 2> >' requested here
qi::rule<Iterator, std::string(), space_type> IDENT, STRING = omit [ char_("\"") [_a =_1] ] >> no_skip [ *(char_ - char_(_a)) ] >> lit(_a) ;
                                                              ^
/usr/include/boost/mpl/assert.hpp:82:5: note: candidate function [with C = false] not viable: no known conversion from 'boost::mpl::failed ************(boost::spirit::qi::lazy_parser<boost::phoenix::actor<boost::phoenix::composite<boost::phoenix::detail::function_eval<1>, boost::fusion::vector<boost::phoenix::value<boost::spirit::terminal<boost::spirit::tag::char_code<boost::spirit::tag::char_, boost::spirit::char_encoding::ascii> > >, boost::spirit::local_variable<0>, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_> > >, boost::spirit::unused_type>::attribute<boost::spirit::context<boost::fusion::cons<std::basic_string<char> &, boost::fusion::nil>, boost::fusion::vector0<void> >, __gnu_cxx::__normal_iterator<const char *, std::basic_string<char> > >::error_invalid_expression::************)(expr_type)' to 'typename assert<false>::type' (aka 'mpl_::assert<false>') for 1st argument
int assertion_failed( typename assert<C>::type );
    ^
In file included from /home/jim/work/mlite/mlite.cpp:29:
In file included from ./pch.hxx:10:
In file included from /usr/include/boost/spirit/include/qi.hpp:16:
In file included from /usr/include/boost/spirit/home/qi.hpp:14:
In file included from /usr/include/boost/spirit/home/qi/action.hpp:14:
In file included from /usr/include/boost/spirit/home/qi/action/action.hpp:16:
In file included from /usr/include/boost/spirit/home/qi/detail/attributes.hpp:12:
/usr/include/boost/spirit/home/support/attributes.hpp:412:26: error: type 'int' cannot be used prior to '::' because it has no members
        typedef typename Component::template
                         ^
/usr/include/boost/spirit/home/qi/auxiliary/lazy.hpp:110:25: note: in instantiation of template class 'boost::spirit::traits::attribute_of<int, boost::spirit::context<boost::fusion::cons<std::basic_string<char> &, boost::fusion::nil>, boost::fusion::vector0<void> >, __gnu_cxx::__normal_iterator<const char *, std::basic_string<char> > >' requested here
                traits::attribute_of<parser_type, Context, Iterator>::type
                        ^
/usr/include/boost/spirit/home/qi/auxiliary/lazy.hpp:270:55: note: in instantiation of template class 'boost::spirit::qi::lazy_parser<boost::phoenix::actor<boost::phoenix::composite<boost::phoenix::detail::function_eval<1>, boost::fusion::vector<boost::phoenix::value<boost::spirit::terminal<boost::spirit::tag::char_code<boost::spirit::tag::char_, boost::spirit::char_encoding::ascii> > >, boost::spirit::local_variable<0>, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_> > >, boost::spirit::unused_type>::attribute<boost::spirit::context<boost::fusion::cons<std::basic_string<char> &, boost::fusion::nil>, boost::fusion::vector0<void> >, __gnu_cxx::__normal_iterator<const char *, std::basic_string<char> > >' requested here
          typename qi::lazy_parser<Actor, Modifiers>::template
                                                      ^
/usr/include/boost/mpl/aux_/nested_type_wknd.hpp:27:7: note: in instantiation of template class 'boost::spirit::traits::handles_container<boost::spirit::qi::lazy_parser<boost::phoenix::actor<boost::phoenix::composite<boost::phoenix::detail::function_eval<1>, boost::fusion::vector<boost::phoenix::value<boost::spirit::terminal<boost::spirit::tag::char_code<boost::spirit::tag::char_, boost::spirit::char_encoding::ascii> > >, boost::spirit::local_variable<0>, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_> > >, boost::spirit::unused_type>, std::basic_string<char>, boost::spirit::context<boost::fusion::cons<std::basic_string<char> &, boost::fusion::nil>, boost::fusion::vector0<void> >, __gnu_cxx::__normal_iterator<const char *, std::basic_string<char> >, void>' requested here
    : T::type
      ^
/usr/include/boost/mpl/aux_/preprocessed/gcc/or.hpp:25:11: note: in instantiation of template class 'boost::mpl::aux::nested_type_wknd<boost::spirit::traits::handles_container<boost::spirit::qi::lazy_parser<boost::phoenix::actor<boost::phoenix::composite<boost::phoenix::detail::function_eval<1>, boost::fusion::vector<boost::phoenix::value<boost::spirit::terminal<boost::spirit::tag::char_code<boost::spirit::tag::char_, boost::spirit::char_encoding::ascii> > >, boost::spirit::local_variable<0>, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_> > >, boost::spirit::unused_type>, std::basic_string<char>, boost::spirit::context<boost::fusion::cons<std::basic_string<char> &, boost::fusion::nil>, boost::fusion::vector0<void> >, __gnu_cxx::__normal_iterator<const char *, std::basic_string<char> >, void> >' requested here
          BOOST_MPL_AUX_NESTED_TYPE_WKND(T1)::value
          ^
/usr/include/boost/mpl/aux_/nested_type_wknd.hpp:38:24: note: expanded from macro 'BOOST_MPL_AUX_NESTED_TYPE_WKND'
    ::boost::mpl::aux::nested_type_wknd<T> \
                       ^
/usr/include/boost/mpl/aux_/preprocessed/gcc/or.hpp:50:7: note: in instantiation of template class 'boost::mpl::aux::or_impl<false, boost::spirit::traits::handles_container<boost::spirit::qi::lazy_parser<boost::phoenix::actor<boost::phoenix::composite<boost::phoenix::detail::function_eval<1>, boost::fusion::vector<boost::phoenix::value<boost::spirit::terminal<boost::spirit::tag::char_code<boost::spirit::tag::char_, boost::spirit::char_encoding::ascii> > >, boost::spirit::local_variable<0>, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_> > >, boost::spirit::unused_type>, std::basic_string<char>, boost::spirit::context<boost::fusion::cons<std::basic_string<char> &, boost::fusion::nil>, boost::fusion::vector0<void> >, __gnu_cxx::__normal_iterator<const char *, std::basic_string<char> >, void>, mpl_::bool_<false>, mpl_::bool_<false>, mpl_::bool_<false> >' requested here
    : aux::or_impl<
      ^
/usr/include/boost/spirit/home/support/handles_container.hpp:37:9: note: (skipping 24 contexts in backtrace; use -ftemplate-backtrace-limit=0 to see all)
      : mpl::or_<
        ^
/usr/include/boost/function/function_template.hpp:1069:5: note: in instantiation of function template specialization 'boost::function4<bool, __gnu_cxx::__normal_iterator<const char *, std::basic_string<char> > &, const __gnu_cxx::__normal_iterator<const char *, std::basic_string<char> > &, boost::spirit::context<boost::fusion::cons<std::basic_string<char> &, boost::fusion::nil>, boost::fusion::vector0<void> > &, const boost::spirit::qi::char_class<boost::spirit::tag::char_code<boost::spirit::tag::space, boost::spirit::char_encoding::ascii> > &>::function4<boost::spirit::qi::detail::parser_binder<boost::spirit::qi::sequence<boost::fusion::cons<boost::spirit::qi::omit_directive<boost::spirit::qi::action<boost::spirit::qi::literal_char<boost::spirit::char_encoding::ascii, false, false>, boost::phoenix::actor<boost::phoenix::composite<boost::phoenix::assign_eval, boost::fusion::vector<boost::spirit::local_variable<0>, boost::spirit::argument<0>, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_> > > > >, boost::fusion::cons<boost::spirit::qi::no_skip_directive<boost::spirit::qi::kleene<boost::spirit::qi::difference<boost::spirit::qi::char_class<boost::spirit::tag::char_code<boost::spirit::tag::char_, boost::spirit::char_encoding::ascii> >, boost::spirit::qi::lazy_parser<boost::phoenix::actor<boost::phoenix::composite<boost::phoenix::detail::function_eval<1>, boost::fusion::vector<boost::phoenix::value<boost::spirit::terminal<boost::spirit::tag::char_code<boost::spirit::tag::char_, boost::spirit::char_encoding::ascii> > >, boost::spirit::local_variable<0>, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_> > >, boost::spirit::unused_type> > > >, boost::fusion::cons<boost::spirit::qi::lazy_parser<boost::phoenix::actor<boost::phoenix::composite<boost::phoenix::detail::function_eval<1>, boost::fusion::vector<boost::phoenix::value<boost::spirit::terminal<boost::spirit::tag::lit> >, boost::spirit::local_variable<0>, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_> > >, boost::spirit::unused_type>, boost::fusion::nil> > > >, mpl_::bool_<false> > >' requested here
    base_type(f)
    ^
/usr/include/boost/function/function_template.hpp:1124:5: note: in instantiation of function template specialization 'boost::function<bool (__gnu_cxx::__normal_iterator<const char *, std::basic_string<char> > &, const __gnu_cxx::__normal_iterator<const char *, std::basic_string<char> > &, boost::spirit::context<boost::fusion::cons<std::basic_string<char> &, boost::fusion::nil>, boost::fusion::vector0<void> > &, const boost::spirit::qi::char_class<boost::spirit::tag::char_code<boost::spirit::tag::space, boost::spirit::char_encoding::ascii> > &)>::function<boost::spirit::qi::detail::parser_binder<boost::spirit::qi::sequence<boost::fusion::cons<boost::spirit::qi::omit_directive<boost::spirit::qi::action<boost::spirit::qi::literal_char<boost::spirit::char_encoding::ascii, false, false>, boost::phoenix::actor<boost::phoenix::composite<boost::phoenix::assign_eval, boost::fusion::vector<boost::spirit::local_variable<0>, boost::spirit::argument<0>, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_> > > > >, boost::fusion::cons<boost::spirit::qi::no_skip_directive<boost::spirit::qi::kleene<boost::spirit::qi::difference<boost::spirit::qi::char_class<boost::spirit::tag::char_code<boost::spirit::tag::char_, boost::spirit::char_encoding::ascii> >, boost::spirit::qi::lazy_parser<boost::phoenix::actor<boost::phoenix::composite<boost::phoenix::detail::function_eval<1>, boost::fusion::vector<boost::phoenix::value<boost::spirit::terminal<boost::spirit::tag::char_code<boost::spirit::tag::char_, boost::spirit::char_encoding::ascii> > >, boost::spirit::local_variable<0>, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_> > >, boost::spirit::unused_type> > > >, boost::fusion::cons<boost::spirit::qi::lazy_parser<boost::phoenix::actor<boost::phoenix::composite<boost::phoenix::detail::function_eval<1>, boost::fusion::vector<boost::phoenix::value<boost::spirit::terminal<boost::spirit::tag::lit> >, boost::spirit::local_variable<0>, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_> > >, boost::spirit::unused_type>, boost::fusion::nil> > > >, mpl_::bool_<false> > >' requested here
    self_type(f).swap(*this);
    ^
/usr/include/boost/spirit/home/qi/nonterminal/rule.hpp:182:19: note: in instantiation of function template specialization 'boost::function<bool (__gnu_cxx::__normal_iterator<const char *, std::basic_string<char> > &, const __gnu_cxx::__normal_iterator<const char *, std::basic_string<char> > &, boost::spirit::context<boost::fusion::cons<std::basic_string<char> &, boost::fusion::nil>, boost::fusion::vector0<void> > &, const boost::spirit::qi::char_class<boost::spirit::tag::char_code<boost::spirit::tag::space, boost::spirit::char_encoding::ascii> > &)>::operator=<boost::spirit::qi::detail::parser_binder<boost::spirit::qi::sequence<boost::fusion::cons<boost::spirit::qi::omit_directive<boost::spirit::qi::action<boost::spirit::qi::literal_char<boost::spirit::char_encoding::ascii, false, false>, boost::phoenix::actor<boost::phoenix::composite<boost::phoenix::assign_eval, boost::fusion::vector<boost::spirit::local_variable<0>, boost::spirit::argument<0>, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_> > > > >, boost::fusion::cons<boost::spirit::qi::no_skip_directive<boost::spirit::qi::kleene<boost::spirit::qi::difference<boost::spirit::qi::char_class<boost::spirit::tag::char_code<boost::spirit::tag::char_, boost::spirit::char_encoding::ascii> >, boost::spirit::qi::lazy_parser<boost::phoenix::actor<boost::phoenix::composite<boost::phoenix::detail::function_eval<1>, boost::fusion::vector<boost::phoenix::value<boost::spirit::terminal<boost::spirit::tag::char_code<boost::spirit::tag::char_, boost::spirit::char_encoding::ascii> > >, boost::spirit::local_variable<0>, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_> > >, boost::spirit::unused_type> > > >, boost::fusion::cons<boost::spirit::qi::lazy_parser<boost::phoenix::actor<boost::phoenix::composite<boost::phoenix::detail::function_eval<1>, boost::fusion::vector<boost::phoenix::value<boost::spirit::terminal<boost::spirit::tag::lit> >, boost::spirit::local_variable<0>, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_> > >, boost::spirit::unused_type>, boost::fusion::nil> > > >, mpl_::bool_<false> > >' requested here
            lhs.f = detail::bind_parser<Auto>(
                  ^
/usr/include/boost/spirit/home/qi/nonterminal/rule.hpp:191:13: note: in instantiation of function template specialization 'boost::spirit::qi::rule<__gnu_cxx::__normal_iterator<const char *, std::basic_string<char> >, std::basic_string<char> (), boost::proto::exprns_::expr<boost::proto::tagns_::tag::terminal, boost::proto::argsns_::term<boost::spirit::tag::char_code<boost::spirit::tag::space, boost::spirit::char_encoding::ascii> >, 0>, boost::spirit::unused_type, boost::spirit::unused_type>::define<mpl_::bool_<false>, boost::proto::exprns_::expr<boost::proto::tagns_::tag::shift_right, boost::proto::argsns_::list2<const boost::proto::exprns_::expr<boost::proto::tagns_::tag::shift_right, boost::proto::argsns_::list2<const boost::proto::exprns_::expr<boost::proto::tagns_::tag::subscript, boost::proto::argsns_::list2<const boost::proto::exprns_::expr<boost::proto::tagns_::tag::terminal, boost::proto::argsns_::term<boost::spirit::tag::omit>, 0> &, const boost::proto::exprns_::expr<boost::proto::tagns_::tag::subscript, boost::proto::argsns_::list2<boost::proto::exprns_::expr<boost::proto::tagns_::tag::terminal, boost::proto::argsns_::term<boost::spirit::terminal_ex<boost::spirit::tag::char_code<boost::spirit::tag::char_, boost::spirit::char_encoding::ascii>, boost::fusion::vector1<char const (&)[2]> > >, 0> &, boost::proto::exprns_::expr<boost::proto::tagns_::tag::terminal, boost::proto::argsns_::term<const boost::phoenix::actor<boost::phoenix::composite<boost::phoenix::assign_eval, boost::fusion::vector<boost::spirit::local_variable<0>, boost::spirit::argument<0>, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_> > > &>, 0> >, 2> &>, 2> &, const boost::proto::exprns_::expr<boost::proto::tagns_::tag::subscript, boost::proto::argsns_::list2<const boost::proto::exprns_::expr<boost::proto::tagns_::tag::terminal, boost::proto::argsns_::term<boost::spirit::tag::no_skip>, 0> &, const boost::proto::exprns_::expr<boost::proto::tagns_::tag::dereference, boost::proto::argsns_::list1<const boost::proto::exprns_::expr<boost::proto::tagns_::tag::minus, boost::proto::argsns_::list2<const boost::spirit::terminal<boost::spirit::tag::char_code<boost::spirit::tag::char_, boost::spirit::char_encoding::ascii> > &, const boost::proto::exprns_::expr<boost::proto::tagns_::tag::terminal, boost::proto::argsns_::term<boost::spirit::lazy_terminal<boost::spirit::tag::char_code<boost::spirit::tag::char_, boost::spirit::char_encoding::ascii>, boost::phoenix::actor<boost::phoenix::composite<boost::phoenix::detail::function_eval<1>, boost::fusion::vector<boost::phoenix::value<boost::spirit::terminal<boost::spirit::tag::char_code<boost::spirit::tag::char_, boost::spirit::char_encoding::ascii> > >, boost::spirit::local_variable<0>, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_> > >, 1> >, 0> &>, 2> &>, 1> &>, 2> &>, 2> &, const boost::proto::exprns_::expr<boost::proto::tagns_::tag::terminal, boost::proto::argsns_::term<boost::spirit::lazy_terminal<boost::spirit::tag::lit, boost::phoenix::actor<boost::phoenix::composite<boost::phoenix::detail::function_eval<1>, boost::fusion::vector<boost::phoenix::value<boost::spirit::terminal<boost::spirit::tag::lit> >, boost::spirit::local_variable<0>, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_> > >, 1> >, 0> &>, 2> >' requested here
            define<mpl::false_>(*this, expr, traits::matches<qi::domain, Expr>());
            ^
/home/jim/work/mlite/mlite.cpp:99:63: note: in instantiation of function template specialization 'boost::spirit::qi::rule<__gnu_cxx::__normal_iterator<const char *, std::basic_string<char> >, std::basic_string<char> (), boost::proto::exprns_::expr<boost::proto::tagns_::tag::terminal, boost::proto::argsns_::term<boost::spirit::tag::char_code<boost::spirit::tag::space, boost::spirit::char_encoding::ascii> >, 0>, boost::spirit::unused_type, boost::spirit::unused_type>::rule<boost::proto::exprns_::expr<boost::proto::tagns_::tag::shift_right, boost::proto::argsns_::list2<const boost::proto::exprns_::expr<boost::proto::tagns_::tag::shift_right, boost::proto::argsns_::list2<const boost::proto::exprns_::expr<boost::proto::tagns_::tag::subscript, boost::proto::argsns_::list2<const boost::proto::exprns_::expr<boost::proto::tagns_::tag::terminal, boost::proto::argsns_::term<boost::spirit::tag::omit>, 0> &, const boost::proto::exprns_::expr<boost::proto::tagns_::tag::subscript, boost::proto::argsns_::list2<boost::proto::exprns_::expr<boost::proto::tagns_::tag::terminal, boost::proto::argsns_::term<boost::spirit::terminal_ex<boost::spirit::tag::char_code<boost::spirit::tag::char_, boost::spirit::char_encoding::ascii>, boost::fusion::vector1<char const (&)[2]> > >, 0> &, boost::proto::exprns_::expr<boost::proto::tagns_::tag::terminal, boost::proto::argsns_::term<const boost::phoenix::actor<boost::phoenix::composite<boost::phoenix::assign_eval, boost::fusion::vector<boost::spirit::local_variable<0>, boost::spirit::argument<0>, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_> > > &>, 0> >, 2> &>, 2> &, const boost::proto::exprns_::expr<boost::proto::tagns_::tag::subscript, boost::proto::argsns_::list2<const boost::proto::exprns_::expr<boost::proto::tagns_::tag::terminal, boost::proto::argsns_::term<boost::spirit::tag::no_skip>, 0> &, const boost::proto::exprns_::expr<boost::proto::tagns_::tag::dereference, boost::proto::argsns_::list1<const boost::proto::exprns_::expr<boost::proto::tagns_::tag::minus, boost::proto::argsns_::list2<const boost::spirit::terminal<boost::spirit::tag::char_code<boost::spirit::tag::char_, boost::spirit::char_encoding::ascii> > &, const boost::proto::exprns_::expr<boost::proto::tagns_::tag::terminal, boost::proto::argsns_::term<boost::spirit::lazy_terminal<boost::spirit::tag::char_code<boost::spirit::tag::char_, boost::spirit::char_encoding::ascii>, boost::phoenix::actor<boost::phoenix::composite<boost::phoenix::detail::function_eval<1>, boost::fusion::vector<boost::phoenix::value<boost::spirit::terminal<boost::spirit::tag::char_code<boost::spirit::tag::char_, boost::spirit::char_encoding::ascii> > >, boost::spirit::local_variable<0>, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_> > >, 1> >, 0> &>, 2> &>, 1> &>, 2> &>, 2> &, const boost::proto::exprns_::expr<boost::proto::tagns_::tag::terminal, boost::proto::argsns_::term<boost::spirit::lazy_terminal<boost::spirit::tag::lit, boost::phoenix::actor<boost::phoenix::composite<boost::phoenix::detail::function_eval<1>, boost::fusion::vector<boost::phoenix::value<boost::spirit::terminal<boost::spirit::tag::lit> >, boost::spirit::local_variable<0>, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_> > >, 1> >, 0> &>, 2> >' requested here
qi::rule<Iterator, std::string(), space_type> IDENT, STRING = omit [ char_("\"") [_a =_1] ] >> no_skip [ *(char_ - char_(_a)) ] >> lit(_a) ;
                                                              ^
In file included from /home/jim/work/mlite/mlite.cpp:29:
In file included from ./pch.hxx:10:
In file included from /usr/include/boost/spirit/include/qi.hpp:16:
In file included from /usr/include/boost/spirit/home/qi.hpp:16:
In file included from /usr/include/boost/spirit/home/qi/auxiliary.hpp:16:
/usr/include/boost/spirit/home/qi/auxiliary/lazy.hpp:103:13: error: no matching function for call to 'assertion_failed'
            BOOST_SPIRIT_ASSERT_MATCH(qi::domain, expr_type);
            ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
/usr/include/boost/spirit/home/support/assert_msg.hpp:35:9: note: expanded from macro 'BOOST_SPIRIT_ASSERT_MATCH'
        BOOST_SPIRIT_ASSERT_MSG((                                             \
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
/usr/include/boost/spirit/home/support/assert_msg.hpp:31:9: note: expanded from macro 'BOOST_SPIRIT_ASSERT_MSG'
        BOOST_MPL_ASSERT_MSG(Cond, Msg, Types)
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
/usr/include/boost/mpl/assert.hpp:434:48: note: expanded from macro 'BOOST_MPL_ASSERT_MSG'
#define BOOST_MPL_ASSERT_MSG( c, msg, types_ ) \
                                               ^
/usr/include/boost/mpl/assert.hpp:428:9: note: expanded from macro '\
BOOST_MPL_ASSERT_MSG_IMPL'
        boost::mpl::assertion_failed<(c)>( BOOST_PP_CAT(mpl_assert_arg,counter)::assert_arg() ) \
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
/usr/include/boost/mpl/assert.hpp:59:58: note: expanded from macro '\
BOOST_MPL_AUX_ASSERT_CONSTANT'
#   define BOOST_MPL_AUX_ASSERT_CONSTANT(T, expr) enum { expr }
                                                         ^
/usr/include/boost/spirit/home/support/attributes.hpp:412:37: note: in instantiation of template class 'boost::spirit::qi::lazy_parser<boost::phoenix::actor<boost::phoenix::composite<boost::phoenix::detail::function_eval<1>, boost::fusion::vector<boost::phoenix::value<boost::spirit::terminal<boost::spirit::tag::lit> >, boost::spirit::local_variable<0>, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_> > >, boost::spirit::unused_type>::attribute<boost::spirit::context<boost::fusion::cons<std::basic_string<char> &, boost::fusion::nil>, boost::fusion::vector0<void> >, __gnu_cxx::__normal_iterator<const char *, std::basic_string<char> > >' requested here
        typedef typename Component::template
                                    ^
/usr/include/boost/spirit/home/qi/detail/pass_container.hpp:323:34: note: in instantiation of template class 'boost::spirit::traits::attribute_of<boost::spirit::qi::lazy_parser<boost::phoenix::actor<boost::phoenix::composite<boost::phoenix::detail::function_eval<1>, boost::fusion::vector<boost::phoenix::value<boost::spirit::terminal<boost::spirit::tag::lit> >, boost::spirit::local_variable<0>, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_> > >, boost::spirit::unused_type>, boost::spirit::context<boost::fusion::cons<std::basic_string<char> &, boost::fusion::nil>, boost::fusion::vector0<void> >, __gnu_cxx::__normal_iterator<const char *, std::basic_string<char> > >' requested here
                typename traits::attribute_of<
                                 ^
/usr/include/boost/fusion/algorithm/query/detail/any.hpp:37:16: note: in instantiation of function template specialization 'boost::spirit::qi::detail::pass_container<boost::spirit::qi::detail::fail_function<__gnu_cxx::__normal_iterator<const char *, std::basic_string<char> >, boost::spirit::context<boost::fusion::cons<std::basic_string<char> &, boost::fusion::nil>, boost::fusion::vector0<void> >, boost::spirit::qi::char_class<boost::spirit::tag::char_code<boost::spirit::tag::space, boost::spirit::char_encoding::ascii> > >, std::basic_string<char>, mpl_::bool_<true> >::operator()<boost::spirit::qi::lazy_parser<boost::phoenix::actor<boost::phoenix::composite<boost::phoenix::detail::function_eval<1>, boost::fusion::vector<boost::phoenix::value<boost::spirit::terminal<boost::spirit::tag::lit> >, boost::spirit::local_variable<0>, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_> > >, boost::spirit::unused_type> >' requested here
        return f(x) || 
               ^
/usr/include/boost/fusion/algorithm/query/detail/any.hpp:38:13: note: in instantiation of function template specialization 'boost::fusion::detail::linear_any<boost::fusion::cons_iterator<const boost::fusion::cons<boost::spirit::qi::lazy_parser<boost::phoenix::actor<boost::phoenix::composite<boost::phoenix::detail::function_eval<1>, boost::fusion::vector<boost::phoenix::value<boost::spirit::terminal<boost::spirit::tag::lit> >, boost::spirit::local_variable<0>, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_> > >, boost::spirit::unused_type>, boost::fusion::nil> >, boost::fusion::cons_iterator<const boost::fusion::nil>, boost::spirit::qi::detail::pass_container<boost::spirit::qi::detail::fail_function<__gnu_cxx::__normal_iterator<const char *, std::basic_string<char> >, boost::spirit::context<boost::fusion::cons<std::basic_string<char> &, boost::fusion::nil>, boost::fusion::vector0<void> >, boost::spirit::qi::char_class<boost::spirit::tag::char_code<boost::spirit::tag::space, boost::spirit::char_encoding::ascii> > >, std::basic_string<char>, mpl_::bool_<true> > >' requested here
            detail::linear_any(
            ^
/usr/include/boost/fusion/algorithm/query/detail/any.hpp:38:13: note: in instantiation of function template specialization 'boost::fusion::detail::linear_any<boost::fusion::cons_iterator<const boost::fusion::cons<boost::spirit::qi::no_skip_directive<boost::spirit::qi::kleene<boost::spirit::qi::difference<boost::spirit::qi::char_class<boost::spirit::tag::char_code<boost::spirit::tag::char_, boost::spirit::char_encoding::ascii> >, boost::spirit::qi::lazy_parser<boost::phoenix::actor<boost::phoenix::composite<boost::phoenix::detail::function_eval<1>, boost::fusion::vector<boost::phoenix::value<boost::spirit::terminal<boost::spirit::tag::char_code<boost::spirit::tag::char_, boost::spirit::char_encoding::ascii> > >, boost::spirit::local_variable<0>, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_> > >, boost::spirit::unused_type> > > >, boost::fusion::cons<boost::spirit::qi::lazy_parser<boost::phoenix::actor<boost::phoenix::composite<boost::phoenix::detail::function_eval<1>, boost::fusion::vector<boost::phoenix::value<boost::spirit::terminal<boost::spirit::tag::lit> >, boost::spirit::local_variable<0>, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_> > >, boost::spirit::unused_type>, boost::fusion::nil> > >, boost::fusion::cons_iterator<const boost::fusion::nil>, boost::spirit::qi::detail::pass_container<boost::spirit::qi::detail::fail_function<__gnu_cxx::__normal_iterator<const char *, std::basic_string<char> >, boost::spirit::context<boost::fusion::cons<std::basic_string<char> &, boost::fusion::nil>, boost::fusion::vector0<void> >, boost::spirit::qi::char_class<boost::spirit::tag::char_code<boost::spirit::tag::space, boost::spirit::char_encoding::ascii> > >, std::basic_string<char>, mpl_::bool_<true> > >' requested here
            detail::linear_any(
            ^
/usr/include/boost/fusion/algorithm/query/detail/any.hpp:49:16: note: (skipping 9 contexts in backtrace; use -ftemplate-backtrace-limit=0 to see all)
        return detail::linear_any(
               ^
/usr/include/boost/function/function_template.hpp:1069:5: note: in instantiation of function template specialization 'boost::function4<bool, __gnu_cxx::__normal_iterator<const char *, std::basic_string<char> > &, const __gnu_cxx::__normal_iterator<const char *, std::basic_string<char> > &, boost::spirit::context<boost::fusion::cons<std::basic_string<char> &, boost::fusion::nil>, boost::fusion::vector0<void> > &, const boost::spirit::qi::char_class<boost::spirit::tag::char_code<boost::spirit::tag::space, boost::spirit::char_encoding::ascii> > &>::function4<boost::spirit::qi::detail::parser_binder<boost::spirit::qi::sequence<boost::fusion::cons<boost::spirit::qi::omit_directive<boost::spirit::qi::action<boost::spirit::qi::literal_char<boost::spirit::char_encoding::ascii, false, false>, boost::phoenix::actor<boost::phoenix::composite<boost::phoenix::assign_eval, boost::fusion::vector<boost::spirit::local_variable<0>, boost::spirit::argument<0>, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_> > > > >, boost::fusion::cons<boost::spirit::qi::no_skip_directive<boost::spirit::qi::kleene<boost::spirit::qi::difference<boost::spirit::qi::char_class<boost::spirit::tag::char_code<boost::spirit::tag::char_, boost::spirit::char_encoding::ascii> >, boost::spirit::qi::lazy_parser<boost::phoenix::actor<boost::phoenix::composite<boost::phoenix::detail::function_eval<1>, boost::fusion::vector<boost::phoenix::value<boost::spirit::terminal<boost::spirit::tag::char_code<boost::spirit::tag::char_, boost::spirit::char_encoding::ascii> > >, boost::spirit::local_variable<0>, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_> > >, boost::spirit::unused_type> > > >, boost::fusion::cons<boost::spirit::qi::lazy_parser<boost::phoenix::actor<boost::phoenix::composite<boost::phoenix::detail::function_eval<1>, boost::fusion::vector<boost::phoenix::value<boost::spirit::terminal<boost::spirit::tag::lit> >, boost::spirit::local_variable<0>, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_> > >, boost::spirit::unused_type>, boost::fusion::nil> > > >, mpl_::bool_<false> > >' requested here
    base_type(f)
    ^
/usr/include/boost/function/function_template.hpp:1124:5: note: in instantiation of function template specialization 'boost::function<bool (__gnu_cxx::__normal_iterator<const char *, std::basic_string<char> > &, const __gnu_cxx::__normal_iterator<const char *, std::basic_string<char> > &, boost::spirit::context<boost::fusion::cons<std::basic_string<char> &, boost::fusion::nil>, boost::fusion::vector0<void> > &, const boost::spirit::qi::char_class<boost::spirit::tag::char_code<boost::spirit::tag::space, boost::spirit::char_encoding::ascii> > &)>::function<boost::spirit::qi::detail::parser_binder<boost::spirit::qi::sequence<boost::fusion::cons<boost::spirit::qi::omit_directive<boost::spirit::qi::action<boost::spirit::qi::literal_char<boost::spirit::char_encoding::ascii, false, false>, boost::phoenix::actor<boost::phoenix::composite<boost::phoenix::assign_eval, boost::fusion::vector<boost::spirit::local_variable<0>, boost::spirit::argument<0>, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_> > > > >, boost::fusion::cons<boost::spirit::qi::no_skip_directive<boost::spirit::qi::kleene<boost::spirit::qi::difference<boost::spirit::qi::char_class<boost::spirit::tag::char_code<boost::spirit::tag::char_, boost::spirit::char_encoding::ascii> >, boost::spirit::qi::lazy_parser<boost::phoenix::actor<boost::phoenix::composite<boost::phoenix::detail::function_eval<1>, boost::fusion::vector<boost::phoenix::value<boost::spirit::terminal<boost::spirit::tag::char_code<boost::spirit::tag::char_, boost::spirit::char_encoding::ascii> > >, boost::spirit::local_variable<0>, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_> > >, boost::spirit::unused_type> > > >, boost::fusion::cons<boost::spirit::qi::lazy_parser<boost::phoenix::actor<boost::phoenix::composite<boost::phoenix::detail::function_eval<1>, boost::fusion::vector<boost::phoenix::value<boost::spirit::terminal<boost::spirit::tag::lit> >, boost::spirit::local_variable<0>, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_> > >, boost::spirit::unused_type>, boost::fusion::nil> > > >, mpl_::bool_<false> > >' requested here
    self_type(f).swap(*this);
    ^
/usr/include/boost/spirit/home/qi/nonterminal/rule.hpp:182:19: note: in instantiation of function template specialization 'boost::function<bool (__gnu_cxx::__normal_iterator<const char *, std::basic_string<char> > &, const __gnu_cxx::__normal_iterator<const char *, std::basic_string<char> > &, boost::spirit::context<boost::fusion::cons<std::basic_string<char> &, boost::fusion::nil>, boost::fusion::vector0<void> > &, const boost::spirit::qi::char_class<boost::spirit::tag::char_code<boost::spirit::tag::space, boost::spirit::char_encoding::ascii> > &)>::operator=<boost::spirit::qi::detail::parser_binder<boost::spirit::qi::sequence<boost::fusion::cons<boost::spirit::qi::omit_directive<boost::spirit::qi::action<boost::spirit::qi::literal_char<boost::spirit::char_encoding::ascii, false, false>, boost::phoenix::actor<boost::phoenix::composite<boost::phoenix::assign_eval, boost::fusion::vector<boost::spirit::local_variable<0>, boost::spirit::argument<0>, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_> > > > >, boost::fusion::cons<boost::spirit::qi::no_skip_directive<boost::spirit::qi::kleene<boost::spirit::qi::difference<boost::spirit::qi::char_class<boost::spirit::tag::char_code<boost::spirit::tag::char_, boost::spirit::char_encoding::ascii> >, boost::spirit::qi::lazy_parser<boost::phoenix::actor<boost::phoenix::composite<boost::phoenix::detail::function_eval<1>, boost::fusion::vector<boost::phoenix::value<boost::spirit::terminal<boost::spirit::tag::char_code<boost::spirit::tag::char_, boost::spirit::char_encoding::ascii> > >, boost::spirit::local_variable<0>, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_> > >, boost::spirit::unused_type> > > >, boost::fusion::cons<boost::spirit::qi::lazy_parser<boost::phoenix::actor<boost::phoenix::composite<boost::phoenix::detail::function_eval<1>, boost::fusion::vector<boost::phoenix::value<boost::spirit::terminal<boost::spirit::tag::lit> >, boost::spirit::local_variable<0>, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_> > >, boost::spirit::unused_type>, boost::fusion::nil> > > >, mpl_::bool_<false> > >' requested here
            lhs.f = detail::bind_parser<Auto>(
                  ^
/usr/include/boost/spirit/home/qi/nonterminal/rule.hpp:191:13: note: in instantiation of function template specialization 'boost::spirit::qi::rule<__gnu_cxx::__normal_iterator<const char *, std::basic_string<char> >, std::basic_string<char> (), boost::proto::exprns_::expr<boost::proto::tagns_::tag::terminal, boost::proto::argsns_::term<boost::spirit::tag::char_code<boost::spirit::tag::space, boost::spirit::char_encoding::ascii> >, 0>, boost::spirit::unused_type, boost::spirit::unused_type>::define<mpl_::bool_<false>, boost::proto::exprns_::expr<boost::proto::tagns_::tag::shift_right, boost::proto::argsns_::list2<const boost::proto::exprns_::expr<boost::proto::tagns_::tag::shift_right, boost::proto::argsns_::list2<const boost::proto::exprns_::expr<boost::proto::tagns_::tag::subscript, boost::proto::argsns_::list2<const boost::proto::exprns_::expr<boost::proto::tagns_::tag::terminal, boost::proto::argsns_::term<boost::spirit::tag::omit>, 0> &, const boost::proto::exprns_::expr<boost::proto::tagns_::tag::subscript, boost::proto::argsns_::list2<boost::proto::exprns_::expr<boost::proto::tagns_::tag::terminal, boost::proto::argsns_::term<boost::spirit::terminal_ex<boost::spirit::tag::char_code<boost::spirit::tag::char_, boost::spirit::char_encoding::ascii>, boost::fusion::vector1<char const (&)[2]> > >, 0> &, boost::proto::exprns_::expr<boost::proto::tagns_::tag::terminal, boost::proto::argsns_::term<const boost::phoenix::actor<boost::phoenix::composite<boost::phoenix::assign_eval, boost::fusion::vector<boost::spirit::local_variable<0>, boost::spirit::argument<0>, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_> > > &>, 0> >, 2> &>, 2> &, const boost::proto::exprns_::expr<boost::proto::tagns_::tag::subscript, boost::proto::argsns_::list2<const boost::proto::exprns_::expr<boost::proto::tagns_::tag::terminal, boost::proto::argsns_::term<boost::spirit::tag::no_skip>, 0> &, const boost::proto::exprns_::expr<boost::proto::tagns_::tag::dereference, boost::proto::argsns_::list1<const boost::proto::exprns_::expr<boost::proto::tagns_::tag::minus, boost::proto::argsns_::list2<const boost::spirit::terminal<boost::spirit::tag::char_code<boost::spirit::tag::char_, boost::spirit::char_encoding::ascii> > &, const boost::proto::exprns_::expr<boost::proto::tagns_::tag::terminal, boost::proto::argsns_::term<boost::spirit::lazy_terminal<boost::spirit::tag::char_code<boost::spirit::tag::char_, boost::spirit::char_encoding::ascii>, boost::phoenix::actor<boost::phoenix::composite<boost::phoenix::detail::function_eval<1>, boost::fusion::vector<boost::phoenix::value<boost::spirit::terminal<boost::spirit::tag::char_code<boost::spirit::tag::char_, boost::spirit::char_encoding::ascii> > >, boost::spirit::local_variable<0>, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_> > >, 1> >, 0> &>, 2> &>, 1> &>, 2> &>, 2> &, const boost::proto::exprns_::expr<boost::proto::tagns_::tag::terminal, boost::proto::argsns_::term<boost::spirit::lazy_terminal<boost::spirit::tag::lit, boost::phoenix::actor<boost::phoenix::composite<boost::phoenix::detail::function_eval<1>, boost::fusion::vector<boost::phoenix::value<boost::spirit::terminal<boost::spirit::tag::lit> >, boost::spirit::local_variable<0>, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_> > >, 1> >, 0> &>, 2> >' requested here
            define<mpl::false_>(*this, expr, traits::matches<qi::domain, Expr>());
            ^
/home/jim/work/mlite/mlite.cpp:99:63: note: in instantiation of function template specialization 'boost::spirit::qi::rule<__gnu_cxx::__normal_iterator<const char *, std::basic_string<char> >, std::basic_string<char> (), boost::proto::exprns_::expr<boost::proto::tagns_::tag::terminal, boost::proto::argsns_::term<boost::spirit::tag::char_code<boost::spirit::tag::space, boost::spirit::char_encoding::ascii> >, 0>, boost::spirit::unused_type, boost::spirit::unused_type>::rule<boost::proto::exprns_::expr<boost::proto::tagns_::tag::shift_right, boost::proto::argsns_::list2<const boost::proto::exprns_::expr<boost::proto::tagns_::tag::shift_right, boost::proto::argsns_::list2<const boost::proto::exprns_::expr<boost::proto::tagns_::tag::subscript, boost::proto::argsns_::list2<const boost::proto::exprns_::expr<boost::proto::tagns_::tag::terminal, boost::proto::argsns_::term<boost::spirit::tag::omit>, 0> &, const boost::proto::exprns_::expr<boost::proto::tagns_::tag::subscript, boost::proto::argsns_::list2<boost::proto::exprns_::expr<boost::proto::tagns_::tag::terminal, boost::proto::argsns_::term<boost::spirit::terminal_ex<boost::spirit::tag::char_code<boost::spirit::tag::char_, boost::spirit::char_encoding::ascii>, boost::fusion::vector1<char const (&)[2]> > >, 0> &, boost::proto::exprns_::expr<boost::proto::tagns_::tag::terminal, boost::proto::argsns_::term<const boost::phoenix::actor<boost::phoenix::composite<boost::phoenix::assign_eval, boost::fusion::vector<boost::spirit::local_variable<0>, boost::spirit::argument<0>, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_> > > &>, 0> >, 2> &>, 2> &, const boost::proto::exprns_::expr<boost::proto::tagns_::tag::subscript, boost::proto::argsns_::list2<const boost::proto::exprns_::expr<boost::proto::tagns_::tag::terminal, boost::proto::argsns_::term<boost::spirit::tag::no_skip>, 0> &, const boost::proto::exprns_::expr<boost::proto::tagns_::tag::dereference, boost::proto::argsns_::list1<const boost::proto::exprns_::expr<boost::proto::tagns_::tag::minus, boost::proto::argsns_::list2<const boost::spirit::terminal<boost::spirit::tag::char_code<boost::spirit::tag::char_, boost::spirit::char_encoding::ascii> > &, const boost::proto::exprns_::expr<boost::proto::tagns_::tag::terminal, boost::proto::argsns_::term<boost::spirit::lazy_terminal<boost::spirit::tag::char_code<boost::spirit::tag::char_, boost::spirit::char_encoding::ascii>, boost::phoenix::actor<boost::phoenix::composite<boost::phoenix::detail::function_eval<1>, boost::fusion::vector<boost::phoenix::value<boost::spirit::terminal<boost::spirit::tag::char_code<boost::spirit::tag::char_, boost::spirit::char_encoding::ascii> > >, boost::spirit::local_variable<0>, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_> > >, 1> >, 0> &>, 2> &>, 1> &>, 2> &>, 2> &, const boost::proto::exprns_::expr<boost::proto::tagns_::tag::terminal, boost::proto::argsns_::term<boost::spirit::lazy_terminal<boost::spirit::tag::lit, boost::phoenix::actor<boost::phoenix::composite<boost::phoenix::detail::function_eval<1>, boost::fusion::vector<boost::phoenix::value<boost::spirit::terminal<boost::spirit::tag::lit> >, boost::spirit::local_variable<0>, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_> > >, 1> >, 0> &>, 2> >' requested here
qi::rule<Iterator, std::string(), space_type> IDENT, STRING = omit [ char_("\"") [_a =_1] ] >> no_skip [ *(char_ - char_(_a)) ] >> lit(_a) ;
                                                              ^
/usr/include/boost/mpl/assert.hpp:82:5: note: candidate function [with C = false] not viable: no known conversion from 'boost::mpl::failed ************(boost::spirit::qi::lazy_parser<boost::phoenix::actor<boost::phoenix::composite<boost::phoenix::detail::function_eval<1>, boost::fusion::vector<boost::phoenix::value<boost::spirit::terminal<boost::spirit::tag::lit> >, boost::spirit::local_variable<0>, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_> > >, boost::spirit::unused_type>::attribute<boost::spirit::context<boost::fusion::cons<std::basic_string<char> &, boost::fusion::nil>, boost::fusion::vector0<void> >, __gnu_cxx::__normal_iterator<const char *, std::basic_string<char> > >::error_invalid_expression::************)(expr_type)' to 'typename assert<false>::type' (aka 'mpl_::assert<false>') for 1st argument
int assertion_failed( typename assert<C>::type );
    ^
In file included from /home/jim/work/mlite/mlite.cpp:29:
In file included from ./pch.hxx:10:
In file included from /usr/include/boost/spirit/include/qi.hpp:16:
In file included from /usr/include/boost/spirit/home/qi.hpp:14:
In file included from /usr/include/boost/spirit/home/qi/action.hpp:14:
In file included from /usr/include/boost/spirit/home/qi/action/action.hpp:16:
In file included from /usr/include/boost/spirit/home/qi/detail/attributes.hpp:12:
/usr/include/boost/spirit/home/support/attributes.hpp:413:13: error: 'attribute' following the 'template' keyword does not refer to a template
            attribute<Context, Iterator>::type type;
            ^~~~~~~~~
/usr/include/boost/spirit/home/qi/auxiliary/lazy.hpp:110:25: note: in instantiation of template class 'boost::spirit::traits::attribute_of<boost::spirit::terminal_ex<boost::spirit::tag::lit, boost::fusion::vector1<mpl_::void_> >, boost::spirit::context<boost::fusion::cons<std::basic_string<char> &, boost::fusion::nil>, boost::fusion::vector0<void> >, __gnu_cxx::__normal_iterator<const char *, std::basic_string<char> > >' requested here
                traits::attribute_of<parser_type, Context, Iterator>::type
                        ^
/usr/include/boost/spirit/home/support/attributes.hpp:412:37: note: in instantiation of template class 'boost::spirit::qi::lazy_parser<boost::phoenix::actor<boost::phoenix::composite<boost::phoenix::detail::function_eval<1>, boost::fusion::vector<boost::phoenix::value<boost::spirit::terminal<boost::spirit::tag::lit> >, boost::spirit::local_variable<0>, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_> > >, boost::spirit::unused_type>::attribute<boost::spirit::context<boost::fusion::cons<std::basic_string<char> &, boost::fusion::nil>, boost::fusion::vector0<void> >, __gnu_cxx::__normal_iterator<const char *, std::basic_string<char> > >' requested here
        typedef typename Component::template
                                    ^
/usr/include/boost/spirit/home/qi/detail/pass_container.hpp:323:34: note: in instantiation of template class 'boost::spirit::traits::attribute_of<boost::spirit::qi::lazy_parser<boost::phoenix::actor<boost::phoenix::composite<boost::phoenix::detail::function_eval<1>, boost::fusion::vector<boost::phoenix::value<boost::spirit::terminal<boost::spirit::tag::lit> >, boost::spirit::local_variable<0>, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_> > >, boost::spirit::unused_type>, boost::spirit::context<boost::fusion::cons<std::basic_string<char> &, boost::fusion::nil>, boost::fusion::vector0<void> >, __gnu_cxx::__normal_iterator<const char *, std::basic_string<char> > >' requested here
                typename traits::attribute_of<
                                 ^
/usr/include/boost/fusion/algorithm/query/detail/any.hpp:37:16: note: in instantiation of function template specialization 'boost::spirit::qi::detail::pass_container<boost::spirit::qi::detail::fail_function<__gnu_cxx::__normal_iterator<const char *, std::basic_string<char> >, boost::spirit::context<boost::fusion::cons<std::basic_string<char> &, boost::fusion::nil>, boost::fusion::vector0<void> >, boost::spirit::qi::char_class<boost::spirit::tag::char_code<boost::spirit::tag::space, boost::spirit::char_encoding::ascii> > >, std::basic_string<char>, mpl_::bool_<true> >::operator()<boost::spirit::qi::lazy_parser<boost::phoenix::actor<boost::phoenix::composite<boost::phoenix::detail::function_eval<1>, boost::fusion::vector<boost::phoenix::value<boost::spirit::terminal<boost::spirit::tag::lit> >, boost::spirit::local_variable<0>, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_> > >, boost::spirit::unused_type> >' requested here
        return f(x) || 
               ^
/usr/include/boost/fusion/algorithm/query/detail/any.hpp:38:13: note: in instantiation of function template specialization 'boost::fusion::detail::linear_any<boost::fusion::cons_iterator<const boost::fusion::cons<boost::spirit::qi::lazy_parser<boost::phoenix::actor<boost::phoenix::composite<boost::phoenix::detail::function_eval<1>, boost::fusion::vector<boost::phoenix::value<boost::spirit::terminal<boost::spirit::tag::lit> >, boost::spirit::local_variable<0>, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_> > >, boost::spirit::unused_type>, boost::fusion::nil> >, boost::fusion::cons_iterator<const boost::fusion::nil>, boost::spirit::qi::detail::pass_container<boost::spirit::qi::detail::fail_function<__gnu_cxx::__normal_iterator<const char *, std::basic_string<char> >, boost::spirit::context<boost::fusion::cons<std::basic_string<char> &, boost::fusion::nil>, boost::fusion::vector0<void> >, boost::spirit::qi::char_class<boost::spirit::tag::char_code<boost::spirit::tag::space, boost::spirit::char_encoding::ascii> > >, std::basic_string<char>, mpl_::bool_<true> > >' requested here
            detail::linear_any(
            ^
/usr/include/boost/fusion/algorithm/query/detail/any.hpp:38:13: note: (skipping 10 contexts in backtrace; use -ftemplate-backtrace-limit=0 to see all)
/usr/include/boost/function/function_template.hpp:1069:5: note: in instantiation of function template specialization 'boost::function4<bool, __gnu_cxx::__normal_iterator<const char *, std::basic_string<char> > &, const __gnu_cxx::__normal_iterator<const char *, std::basic_string<char> > &, boost::spirit::context<boost::fusion::cons<std::basic_string<char> &, boost::fusion::nil>, boost::fusion::vector0<void> > &, const boost::spirit::qi::char_class<boost::spirit::tag::char_code<boost::spirit::tag::space, boost::spirit::char_encoding::ascii> > &>::function4<boost::spirit::qi::detail::parser_binder<boost::spirit::qi::sequence<boost::fusion::cons<boost::spirit::qi::omit_directive<boost::spirit::qi::action<boost::spirit::qi::literal_char<boost::spirit::char_encoding::ascii, false, false>, boost::phoenix::actor<boost::phoenix::composite<boost::phoenix::assign_eval, boost::fusion::vector<boost::spirit::local_variable<0>, boost::spirit::argument<0>, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_> > > > >, boost::fusion::cons<boost::spirit::qi::no_skip_directive<boost::spirit::qi::kleene<boost::spirit::qi::difference<boost::spirit::qi::char_class<boost::spirit::tag::char_code<boost::spirit::tag::char_, boost::spirit::char_encoding::ascii> >, boost::spirit::qi::lazy_parser<boost::phoenix::actor<boost::phoenix::composite<boost::phoenix::detail::function_eval<1>, boost::fusion::vector<boost::phoenix::value<boost::spirit::terminal<boost::spirit::tag::char_code<boost::spirit::tag::char_, boost::spirit::char_encoding::ascii> > >, boost::spirit::local_variable<0>, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_> > >, boost::spirit::unused_type> > > >, boost::fusion::cons<boost::spirit::qi::lazy_parser<boost::phoenix::actor<boost::phoenix::composite<boost::phoenix::detail::function_eval<1>, boost::fusion::vector<boost::phoenix::value<boost::spirit::terminal<boost::spirit::tag::lit> >, boost::spirit::local_variable<0>, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_> > >, boost::spirit::unused_type>, boost::fusion::nil> > > >, mpl_::bool_<false> > >' requested here
    base_type(f)
    ^
/usr/include/boost/function/function_template.hpp:1124:5: note: in instantiation of function template specialization 'boost::function<bool (__gnu_cxx::__normal_iterator<const char *, std::basic_string<char> > &, const __gnu_cxx::__normal_iterator<const char *, std::basic_string<char> > &, boost::spirit::context<boost::fusion::cons<std::basic_string<char> &, boost::fusion::nil>, boost::fusion::vector0<void> > &, const boost::spirit::qi::char_class<boost::spirit::tag::char_code<boost::spirit::tag::space, boost::spirit::char_encoding::ascii> > &)>::function<boost::spirit::qi::detail::parser_binder<boost::spirit::qi::sequence<boost::fusion::cons<boost::spirit::qi::omit_directive<boost::spirit::qi::action<boost::spirit::qi::literal_char<boost::spirit::char_encoding::ascii, false, false>, boost::phoenix::actor<boost::phoenix::composite<boost::phoenix::assign_eval, boost::fusion::vector<boost::spirit::local_variable<0>, boost::spirit::argument<0>, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_> > > > >, boost::fusion::cons<boost::spirit::qi::no_skip_directive<boost::spirit::qi::kleene<boost::spirit::qi::difference<boost::spirit::qi::char_class<boost::spirit::tag::char_code<boost::spirit::tag::char_, boost::spirit::char_encoding::ascii> >, boost::spirit::qi::lazy_parser<boost::phoenix::actor<boost::phoenix::composite<boost::phoenix::detail::function_eval<1>, boost::fusion::vector<boost::phoenix::value<boost::spirit::terminal<boost::spirit::tag::char_code<boost::spirit::tag::char_, boost::spirit::char_encoding::ascii> > >, boost::spirit::local_variable<0>, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_> > >, boost::spirit::unused_type> > > >, boost::fusion::cons<boost::spirit::qi::lazy_parser<boost::phoenix::actor<boost::phoenix::composite<boost::phoenix::detail::function_eval<1>, boost::fusion::vector<boost::phoenix::value<boost::spirit::terminal<boost::spirit::tag::lit> >, boost::spirit::local_variable<0>, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_> > >, boost::spirit::unused_type>, boost::fusion::nil> > > >, mpl_::bool_<false> > >' requested here
    self_type(f).swap(*this);
    ^
/usr/include/boost/spirit/home/qi/nonterminal/rule.hpp:182:19: note: in instantiation of function template specialization 'boost::function<bool (__gnu_cxx::__normal_iterator<const char *, std::basic_string<char> > &, const __gnu_cxx::__normal_iterator<const char *, std::basic_string<char> > &, boost::spirit::context<boost::fusion::cons<std::basic_string<char> &, boost::fusion::nil>, boost::fusion::vector0<void> > &, const boost::spirit::qi::char_class<boost::spirit::tag::char_code<boost::spirit::tag::space, boost::spirit::char_encoding::ascii> > &)>::operator=<boost::spirit::qi::detail::parser_binder<boost::spirit::qi::sequence<boost::fusion::cons<boost::spirit::qi::omit_directive<boost::spirit::qi::action<boost::spirit::qi::literal_char<boost::spirit::char_encoding::ascii, false, false>, boost::phoenix::actor<boost::phoenix::composite<boost::phoenix::assign_eval, boost::fusion::vector<boost::spirit::local_variable<0>, boost::spirit::argument<0>, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_> > > > >, boost::fusion::cons<boost::spirit::qi::no_skip_directive<boost::spirit::qi::kleene<boost::spirit::qi::difference<boost::spirit::qi::char_class<boost::spirit::tag::char_code<boost::spirit::tag::char_, boost::spirit::char_encoding::ascii> >, boost::spirit::qi::lazy_parser<boost::phoenix::actor<boost::phoenix::composite<boost::phoenix::detail::function_eval<1>, boost::fusion::vector<boost::phoenix::value<boost::spirit::terminal<boost::spirit::tag::char_code<boost::spirit::tag::char_, boost::spirit::char_encoding::ascii> > >, boost::spirit::local_variable<0>, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_> > >, boost::spirit::unused_type> > > >, boost::fusion::cons<boost::spirit::qi::lazy_parser<boost::phoenix::actor<boost::phoenix::composite<boost::phoenix::detail::function_eval<1>, boost::fusion::vector<boost::phoenix::value<boost::spirit::terminal<boost::spirit::tag::lit> >, boost::spirit::local_variable<0>, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_> > >, boost::spirit::unused_type>, boost::fusion::nil> > > >, mpl_::bool_<false> > >' requested here
            lhs.f = detail::bind_parser<Auto>(
                  ^
/usr/include/boost/spirit/home/qi/nonterminal/rule.hpp:191:13: note: in instantiation of function template specialization 'boost::spirit::qi::rule<__gnu_cxx::__normal_iterator<const char *, std::basic_string<char> >, std::basic_string<char> (), boost::proto::exprns_::expr<boost::proto::tagns_::tag::terminal, boost::proto::argsns_::term<boost::spirit::tag::char_code<boost::spirit::tag::space, boost::spirit::char_encoding::ascii> >, 0>, boost::spirit::unused_type, boost::spirit::unused_type>::define<mpl_::bool_<false>, boost::proto::exprns_::expr<boost::proto::tagns_::tag::shift_right, boost::proto::argsns_::list2<const boost::proto::exprns_::expr<boost::proto::tagns_::tag::shift_right, boost::proto::argsns_::list2<const boost::proto::exprns_::expr<boost::proto::tagns_::tag::subscript, boost::proto::argsns_::list2<const boost::proto::exprns_::expr<boost::proto::tagns_::tag::terminal, boost::proto::argsns_::term<boost::spirit::tag::omit>, 0> &, const boost::proto::exprns_::expr<boost::proto::tagns_::tag::subscript, boost::proto::argsns_::list2<boost::proto::exprns_::expr<boost::proto::tagns_::tag::terminal, boost::proto::argsns_::term<boost::spirit::terminal_ex<boost::spirit::tag::char_code<boost::spirit::tag::char_, boost::spirit::char_encoding::ascii>, boost::fusion::vector1<char const (&)[2]> > >, 0> &, boost::proto::exprns_::expr<boost::proto::tagns_::tag::terminal, boost::proto::argsns_::term<const boost::phoenix::actor<boost::phoenix::composite<boost::phoenix::assign_eval, boost::fusion::vector<boost::spirit::local_variable<0>, boost::spirit::argument<0>, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_> > > &>, 0> >, 2> &>, 2> &, const boost::proto::exprns_::expr<boost::proto::tagns_::tag::subscript, boost::proto::argsns_::list2<const boost::proto::exprns_::expr<boost::proto::tagns_::tag::terminal, boost::proto::argsns_::term<boost::spirit::tag::no_skip>, 0> &, const boost::proto::exprns_::expr<boost::proto::tagns_::tag::dereference, boost::proto::argsns_::list1<const boost::proto::exprns_::expr<boost::proto::tagns_::tag::minus, boost::proto::argsns_::list2<const boost::spirit::terminal<boost::spirit::tag::char_code<boost::spirit::tag::char_, boost::spirit::char_encoding::ascii> > &, const boost::proto::exprns_::expr<boost::proto::tagns_::tag::terminal, boost::proto::argsns_::term<boost::spirit::lazy_terminal<boost::spirit::tag::char_code<boost::spirit::tag::char_, boost::spirit::char_encoding::ascii>, boost::phoenix::actor<boost::phoenix::composite<boost::phoenix::detail::function_eval<1>, boost::fusion::vector<boost::phoenix::value<boost::spirit::terminal<boost::spirit::tag::char_code<boost::spirit::tag::char_, boost::spirit::char_encoding::ascii> > >, boost::spirit::local_variable<0>, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_> > >, 1> >, 0> &>, 2> &>, 1> &>, 2> &>, 2> &, const boost::proto::exprns_::expr<boost::proto::tagns_::tag::terminal, boost::proto::argsns_::term<boost::spirit::lazy_terminal<boost::spirit::tag::lit, boost::phoenix::actor<boost::phoenix::composite<boost::phoenix::detail::function_eval<1>, boost::fusion::vector<boost::phoenix::value<boost::spirit::terminal<boost::spirit::tag::lit> >, boost::spirit::local_variable<0>, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_> > >, 1> >, 0> &>, 2> >' requested here
            define<mpl::false_>(*this, expr, traits::matches<qi::domain, Expr>());
            ^
/home/jim/work/mlite/mlite.cpp:99:63: note: in instantiation of function template specialization 'boost::spirit::qi::rule<__gnu_cxx::__normal_iterator<const char *, std::basic_string<char> >, std::basic_string<char> (), boost::proto::exprns_::expr<boost::proto::tagns_::tag::terminal, boost::proto::argsns_::term<boost::spirit::tag::char_code<boost::spirit::tag::space, boost::spirit::char_encoding::ascii> >, 0>, boost::spirit::unused_type, boost::spirit::unused_type>::rule<boost::proto::exprns_::expr<boost::proto::tagns_::tag::shift_right, boost::proto::argsns_::list2<const boost::proto::exprns_::expr<boost::proto::tagns_::tag::shift_right, boost::proto::argsns_::list2<const boost::proto::exprns_::expr<boost::proto::tagns_::tag::subscript, boost::proto::argsns_::list2<const boost::proto::exprns_::expr<boost::proto::tagns_::tag::terminal, boost::proto::argsns_::term<boost::spirit::tag::omit>, 0> &, const boost::proto::exprns_::expr<boost::proto::tagns_::tag::subscript, boost::proto::argsns_::list2<boost::proto::exprns_::expr<boost::proto::tagns_::tag::terminal, boost::proto::argsns_::term<boost::spirit::terminal_ex<boost::spirit::tag::char_code<boost::spirit::tag::char_, boost::spirit::char_encoding::ascii>, boost::fusion::vector1<char const (&)[2]> > >, 0> &, boost::proto::exprns_::expr<boost::proto::tagns_::tag::terminal, boost::proto::argsns_::term<const boost::phoenix::actor<boost::phoenix::composite<boost::phoenix::assign_eval, boost::fusion::vector<boost::spirit::local_variable<0>, boost::spirit::argument<0>, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_> > > &>, 0> >, 2> &>, 2> &, const boost::proto::exprns_::expr<boost::proto::tagns_::tag::subscript, boost::proto::argsns_::list2<const boost::proto::exprns_::expr<boost::proto::tagns_::tag::terminal, boost::proto::argsns_::term<boost::spirit::tag::no_skip>, 0> &, const boost::proto::exprns_::expr<boost::proto::tagns_::tag::dereference, boost::proto::argsns_::list1<const boost::proto::exprns_::expr<boost::proto::tagns_::tag::minus, boost::proto::argsns_::list2<const boost::spirit::terminal<boost::spirit::tag::char_code<boost::spirit::tag::char_, boost::spirit::char_encoding::ascii> > &, const boost::proto::exprns_::expr<boost::proto::tagns_::tag::terminal, boost::proto::argsns_::term<boost::spirit::lazy_terminal<boost::spirit::tag::char_code<boost::spirit::tag::char_, boost::spirit::char_encoding::ascii>, boost::phoenix::actor<boost::phoenix::composite<boost::phoenix::detail::function_eval<1>, boost::fusion::vector<boost::phoenix::value<boost::spirit::terminal<boost::spirit::tag::char_code<boost::spirit::tag::char_, boost::spirit::char_encoding::ascii> > >, boost::spirit::local_variable<0>, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_> > >, 1> >, 0> &>, 2> &>, 1> &>, 2> &>, 2> &, const boost::proto::exprns_::expr<boost::proto::tagns_::tag::terminal, boost::proto::argsns_::term<boost::spirit::lazy_terminal<boost::spirit::tag::lit, boost::phoenix::actor<boost::phoenix::composite<boost::phoenix::detail::function_eval<1>, boost::fusion::vector<boost::phoenix::value<boost::spirit::terminal<boost::spirit::tag::lit> >, boost::spirit::local_variable<0>, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_> > >, 1> >, 0> &>, 2> >' requested here
qi::rule<Iterator, std::string(), space_type> IDENT, STRING = omit [ char_("\"") [_a =_1] ] >> no_skip [ *(char_ - char_(_a)) ] >> lit(_a) ;
                                                              ^
In file included from /home/jim/work/mlite/mlite.cpp:29:
In file included from ./pch.hxx:10:
In file included from /usr/include/boost/spirit/include/qi.hpp:16:
In file included from /usr/include/boost/spirit/home/qi.hpp:19:
In file included from /usr/include/boost/spirit/home/qi/directive.hpp:23:
In file included from /usr/include/boost/spirit/home/qi/directive/repeat.hpp:18:
In file included from /usr/include/boost/spirit/home/qi/operator/kleene.hpp:20:
/usr/include/boost/spirit/home/qi/detail/pass_container.hpp:331:20: error: no matching member function for call to 'dispatch_attribute'
            return dispatch_attribute(component, predicate());
                   ^~~~~~~~~~~~~~~~~~
/usr/include/boost/fusion/algorithm/query/detail/any.hpp:37:16: note: in instantiation of function template specialization 'boost::spirit::qi::detail::pass_container<boost::spirit::qi::detail::fail_function<__gnu_cxx::__normal_iterator<const char *, std::basic_string<char> >, boost::spirit::context<boost::fusion::cons<std::basic_string<char> &, boost::fusion::nil>, boost::fusion::vector0<void> >, boost::spirit::qi::char_class<boost::spirit::tag::char_code<boost::spirit::tag::space, boost::spirit::char_encoding::ascii> > >, std::basic_string<char>, mpl_::bool_<true> >::operator()<boost::spirit::qi::lazy_parser<boost::phoenix::actor<boost::phoenix::composite<boost::phoenix::detail::function_eval<1>, boost::fusion::vector<boost::phoenix::value<boost::spirit::terminal<boost::spirit::tag::lit> >, boost::spirit::local_variable<0>, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_> > >, boost::spirit::unused_type> >' requested here
        return f(x) || 
               ^
/usr/include/boost/fusion/algorithm/query/detail/any.hpp:38:13: note: in instantiation of function template specialization 'boost::fusion::detail::linear_any<boost::fusion::cons_iterator<const boost::fusion::cons<boost::spirit::qi::lazy_parser<boost::phoenix::actor<boost::phoenix::composite<boost::phoenix::detail::function_eval<1>, boost::fusion::vector<boost::phoenix::value<boost::spirit::terminal<boost::spirit::tag::lit> >, boost::spirit::local_variable<0>, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_> > >, boost::spirit::unused_type>, boost::fusion::nil> >, boost::fusion::cons_iterator<const boost::fusion::nil>, boost::spirit::qi::detail::pass_container<boost::spirit::qi::detail::fail_function<__gnu_cxx::__normal_iterator<const char *, std::basic_string<char> >, boost::spirit::context<boost::fusion::cons<std::basic_string<char> &, boost::fusion::nil>, boost::fusion::vector0<void> >, boost::spirit::qi::char_class<boost::spirit::tag::char_code<boost::spirit::tag::space, boost::spirit::char_encoding::ascii> > >, std::basic_string<char>, mpl_::bool_<true> > >' requested here
            detail::linear_any(
            ^
/usr/include/boost/fusion/algorithm/query/detail/any.hpp:38:13: note: in instantiation of function template specialization 'boost::fusion::detail::linear_any<boost::fusion::cons_iterator<const boost::fusion::cons<boost::spirit::qi::no_skip_directive<boost::spirit::qi::kleene<boost::spirit::qi::difference<boost::spirit::qi::char_class<boost::spirit::tag::char_code<boost::spirit::tag::char_, boost::spirit::char_encoding::ascii> >, boost::spirit::qi::lazy_parser<boost::phoenix::actor<boost::phoenix::composite<boost::phoenix::detail::function_eval<1>, boost::fusion::vector<boost::phoenix::value<boost::spirit::terminal<boost::spirit::tag::char_code<boost::spirit::tag::char_, boost::spirit::char_encoding::ascii> > >, boost::spirit::local_variable<0>, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_> > >, boost::spirit::unused_type> > > >, boost::fusion::cons<boost::spirit::qi::lazy_parser<boost::phoenix::actor<boost::phoenix::composite<boost::phoenix::detail::function_eval<1>, boost::fusion::vector<boost::phoenix::value<boost::spirit::terminal<boost::spirit::tag::lit> >, boost::spirit::local_variable<0>, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_> > >, boost::spirit::unused_type>, boost::fusion::nil> > >, boost::fusion::cons_iterator<const boost::fusion::nil>, boost::spirit::qi::detail::pass_container<boost::spirit::qi::detail::fail_function<__gnu_cxx::__normal_iterator<const char *, std::basic_string<char> >, boost::spirit::context<boost::fusion::cons<std::basic_string<char> &, boost::fusion::nil>, boost::fusion::vector0<void> >, boost::spirit::qi::char_class<boost::spirit::tag::char_code<boost::spirit::tag::space, boost::spirit::char_encoding::ascii> > >, std::basic_string<char>, mpl_::bool_<true> > >' requested here
            detail::linear_any(
            ^
/usr/include/boost/fusion/algorithm/query/detail/any.hpp:49:16: note: in instantiation of function template specialization 'boost::fusion::detail::linear_any<boost::fusion::cons_iterator<const boost::fusion::cons<boost::spirit::qi::omit_directive<boost::spirit::qi::action<boost::spirit::qi::literal_char<boost::spirit::char_encoding::ascii, false, false>, boost::phoenix::actor<boost::phoenix::composite<boost::phoenix::assign_eval, boost::fusion::vector<boost::spirit::local_variable<0>, boost::spirit::argument<0>, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_> > > > >, boost::fusion::cons<boost::spirit::qi::no_skip_directive<boost::spirit::qi::kleene<boost::spirit::qi::difference<boost::spirit::qi::char_class<boost::spirit::tag::char_code<boost::spirit::tag::char_, boost::spirit::char_encoding::ascii> >, boost::spirit::qi::lazy_parser<boost::phoenix::actor<boost::phoenix::composite<boost::phoenix::detail::function_eval<1>, boost::fusion::vector<boost::phoenix::value<boost::spirit::terminal<boost::spirit::tag::char_code<boost::spirit::tag::char_, boost::spirit::char_encoding::ascii> > >, boost::spirit::local_variable<0>, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_> > >, boost::spirit::unused_type> > > >, boost::fusion::cons<boost::spirit::qi::lazy_parser<boost::phoenix::actor<boost::phoenix::composite<boost::phoenix::detail::function_eval<1>, boost::fusion::vector<boost::phoenix::value<boost::spirit::terminal<boost::spirit::tag::lit> >, boost::spirit::local_variable<0>, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_> > >, boost::spirit::unused_type>, boost::fusion::nil> > > >, boost::fusion::cons_iterator<const boost::fusion::nil>, boost::spirit::qi::detail::pass_container<boost::spirit::qi::detail::fail_function<__gnu_cxx::__normal_iterator<const char *, std::basic_string<char> >, boost::spirit::context<boost::fusion::cons<std::basic_string<char> &, boost::fusion::nil>, boost::fusion::vector0<void> >, boost::spirit::qi::char_class<boost::spirit::tag::char_code<boost::spirit::tag::space, boost::spirit::char_encoding::ascii> > >, std::basic_string<char>, mpl_::bool_<true> > >' requested here
        return detail::linear_any(
               ^
/usr/include/boost/fusion/algorithm/query/any.hpp:30:16: note: in instantiation of function template specialization 'boost::fusion::detail::any<boost::fusion::cons<boost::spirit::qi::omit_directive<boost::spirit::qi::action<boost::spirit::qi::literal_char<boost::spirit::char_encoding::ascii, false, false>, boost::phoenix::actor<boost::phoenix::composite<boost::phoenix::assign_eval, boost::fusion::vector<boost::spirit::local_variable<0>, boost::spirit::argument<0>, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_> > > > >, boost::fusion::cons<boost::spirit::qi::no_skip_directive<boost::spirit::qi::kleene<boost::spirit::qi::difference<boost::spirit::qi::char_class<boost::spirit::tag::char_code<boost::spirit::tag::char_, boost::spirit::char_encoding::ascii> >, boost::spirit::qi::lazy_parser<boost::phoenix::actor<boost::phoenix::composite<boost::phoenix::detail::function_eval<1>, boost::fusion::vector<boost::phoenix::value<boost::spirit::terminal<boost::spirit::tag::char_code<boost::spirit::tag::char_, boost::spirit::char_encoding::ascii> > >, boost::spirit::local_variable<0>, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_> > >, boost::spirit::unused_type> > > >, boost::fusion::cons<boost::spirit::qi::lazy_parser<boost::phoenix::actor<boost::phoenix::composite<boost::phoenix::detail::function_eval<1>, boost::fusion::vector<boost::phoenix::value<boost::spirit::terminal<boost::spirit::tag::lit> >, boost::spirit::local_variable<0>, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_> > >, boost::spirit::unused_type>, boost::fusion::nil> > >, boost::spirit::qi::detail::pass_container<boost::spirit::qi::detail::fail_function<__gnu_cxx::__normal_iterator<const char *, std::basic_string<char> >, boost::spirit::context<boost::fusion::cons<std::basic_string<char> &, boost::fusion::nil>, boost::fusion::vector0<void> >, boost::spirit::qi::char_class<boost::spirit::tag::char_code<boost::spirit::tag::space, boost::spirit::char_encoding::ascii> > >, std::basic_string<char>, mpl_::bool_<true> >, boost::fusion::forward_traversal_tag>' requested here
        return detail::any(seq, f, typename traits::category_of<Sequence>::type());
               ^
/usr/include/boost/spirit/home/qi/operator/sequence_base.hpp:106:17: note: (skipping 7 contexts in backtrace; use -ftemplate-backtrace-limit=0 to see all)
            if (fusion::any(elements
                ^
/usr/include/boost/function/function_template.hpp:1069:5: note: in instantiation of function template specialization 'boost::function4<bool, __gnu_cxx::__normal_iterator<const char *, std::basic_string<char> > &, const __gnu_cxx::__normal_iterator<const char *, std::basic_string<char> > &, boost::spirit::context<boost::fusion::cons<std::basic_string<char> &, boost::fusion::nil>, boost::fusion::vector0<void> > &, const boost::spirit::qi::char_class<boost::spirit::tag::char_code<boost::spirit::tag::space, boost::spirit::char_encoding::ascii> > &>::function4<boost::spirit::qi::detail::parser_binder<boost::spirit::qi::sequence<boost::fusion::cons<boost::spirit::qi::omit_directive<boost::spirit::qi::action<boost::spirit::qi::literal_char<boost::spirit::char_encoding::ascii, false, false>, boost::phoenix::actor<boost::phoenix::composite<boost::phoenix::assign_eval, boost::fusion::vector<boost::spirit::local_variable<0>, boost::spirit::argument<0>, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_> > > > >, boost::fusion::cons<boost::spirit::qi::no_skip_directive<boost::spirit::qi::kleene<boost::spirit::qi::difference<boost::spirit::qi::char_class<boost::spirit::tag::char_code<boost::spirit::tag::char_, boost::spirit::char_encoding::ascii> >, boost::spirit::qi::lazy_parser<boost::phoenix::actor<boost::phoenix::composite<boost::phoenix::detail::function_eval<1>, boost::fusion::vector<boost::phoenix::value<boost::spirit::terminal<boost::spirit::tag::char_code<boost::spirit::tag::char_, boost::spirit::char_encoding::ascii> > >, boost::spirit::local_variable<0>, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_> > >, boost::spirit::unused_type> > > >, boost::fusion::cons<boost::spirit::qi::lazy_parser<boost::phoenix::actor<boost::phoenix::composite<boost::phoenix::detail::function_eval<1>, boost::fusion::vector<boost::phoenix::value<boost::spirit::terminal<boost::spirit::tag::lit> >, boost::spirit::local_variable<0>, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_> > >, boost::spirit::unused_type>, boost::fusion::nil> > > >, mpl_::bool_<false> > >' requested here
    base_type(f)
    ^
/usr/include/boost/function/function_template.hpp:1124:5: note: in instantiation of function template specialization 'boost::function<bool (__gnu_cxx::__normal_iterator<const char *, std::basic_string<char> > &, const __gnu_cxx::__normal_iterator<const char *, std::basic_string<char> > &, boost::spirit::context<boost::fusion::cons<std::basic_string<char> &, boost::fusion::nil>, boost::fusion::vector0<void> > &, const boost::spirit::qi::char_class<boost::spirit::tag::char_code<boost::spirit::tag::space, boost::spirit::char_encoding::ascii> > &)>::function<boost::spirit::qi::detail::parser_binder<boost::spirit::qi::sequence<boost::fusion::cons<boost::spirit::qi::omit_directive<boost::spirit::qi::action<boost::spirit::qi::literal_char<boost::spirit::char_encoding::ascii, false, false>, boost::phoenix::actor<boost::phoenix::composite<boost::phoenix::assign_eval, boost::fusion::vector<boost::spirit::local_variable<0>, boost::spirit::argument<0>, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_> > > > >, boost::fusion::cons<boost::spirit::qi::no_skip_directive<boost::spirit::qi::kleene<boost::spirit::qi::difference<boost::spirit::qi::char_class<boost::spirit::tag::char_code<boost::spirit::tag::char_, boost::spirit::char_encoding::ascii> >, boost::spirit::qi::lazy_parser<boost::phoenix::actor<boost::phoenix::composite<boost::phoenix::detail::function_eval<1>, boost::fusion::vector<boost::phoenix::value<boost::spirit::terminal<boost::spirit::tag::char_code<boost::spirit::tag::char_, boost::spirit::char_encoding::ascii> > >, boost::spirit::local_variable<0>, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_> > >, boost::spirit::unused_type> > > >, boost::fusion::cons<boost::spirit::qi::lazy_parser<boost::phoenix::actor<boost::phoenix::composite<boost::phoenix::detail::function_eval<1>, boost::fusion::vector<boost::phoenix::value<boost::spirit::terminal<boost::spirit::tag::lit> >, boost::spirit::local_variable<0>, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_> > >, boost::spirit::unused_type>, boost::fusion::nil> > > >, mpl_::bool_<false> > >' requested here
    self_type(f).swap(*this);
    ^
/usr/include/boost/spirit/home/qi/nonterminal/rule.hpp:182:19: note: in instantiation of function template specialization 'boost::function<bool (__gnu_cxx::__normal_iterator<const char *, std::basic_string<char> > &, const __gnu_cxx::__normal_iterator<const char *, std::basic_string<char> > &, boost::spirit::context<boost::fusion::cons<std::basic_string<char> &, boost::fusion::nil>, boost::fusion::vector0<void> > &, const boost::spirit::qi::char_class<boost::spirit::tag::char_code<boost::spirit::tag::space, boost::spirit::char_encoding::ascii> > &)>::operator=<boost::spirit::qi::detail::parser_binder<boost::spirit::qi::sequence<boost::fusion::cons<boost::spirit::qi::omit_directive<boost::spirit::qi::action<boost::spirit::qi::literal_char<boost::spirit::char_encoding::ascii, false, false>, boost::phoenix::actor<boost::phoenix::composite<boost::phoenix::assign_eval, boost::fusion::vector<boost::spirit::local_variable<0>, boost::spirit::argument<0>, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_> > > > >, boost::fusion::cons<boost::spirit::qi::no_skip_directive<boost::spirit::qi::kleene<boost::spirit::qi::difference<boost::spirit::qi::char_class<boost::spirit::tag::char_code<boost::spirit::tag::char_, boost::spirit::char_encoding::ascii> >, boost::spirit::qi::lazy_parser<boost::phoenix::actor<boost::phoenix::composite<boost::phoenix::detail::function_eval<1>, boost::fusion::vector<boost::phoenix::value<boost::spirit::terminal<boost::spirit::tag::char_code<boost::spirit::tag::char_, boost::spirit::char_encoding::ascii> > >, boost::spirit::local_variable<0>, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_> > >, boost::spirit::unused_type> > > >, boost::fusion::cons<boost::spirit::qi::lazy_parser<boost::phoenix::actor<boost::phoenix::composite<boost::phoenix::detail::function_eval<1>, boost::fusion::vector<boost::phoenix::value<boost::spirit::terminal<boost::spirit::tag::lit> >, boost::spirit::local_variable<0>, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_> > >, boost::spirit::unused_type>, boost::fusion::nil> > > >, mpl_::bool_<false> > >' requested here
            lhs.f = detail::bind_parser<Auto>(
                  ^
/usr/include/boost/spirit/home/qi/nonterminal/rule.hpp:191:13: note: in instantiation of function template specialization 'boost::spirit::qi::rule<__gnu_cxx::__normal_iterator<const char *, std::basic_string<char> >, std::basic_string<char> (), boost::proto::exprns_::expr<boost::proto::tagns_::tag::terminal, boost::proto::argsns_::term<boost::spirit::tag::char_code<boost::spirit::tag::space, boost::spirit::char_encoding::ascii> >, 0>, boost::spirit::unused_type, boost::spirit::unused_type>::define<mpl_::bool_<false>, boost::proto::exprns_::expr<boost::proto::tagns_::tag::shift_right, boost::proto::argsns_::list2<const boost::proto::exprns_::expr<boost::proto::tagns_::tag::shift_right, boost::proto::argsns_::list2<const boost::proto::exprns_::expr<boost::proto::tagns_::tag::subscript, boost::proto::argsns_::list2<const boost::proto::exprns_::expr<boost::proto::tagns_::tag::terminal, boost::proto::argsns_::term<boost::spirit::tag::omit>, 0> &, const boost::proto::exprns_::expr<boost::proto::tagns_::tag::subscript, boost::proto::argsns_::list2<boost::proto::exprns_::expr<boost::proto::tagns_::tag::terminal, boost::proto::argsns_::term<boost::spirit::terminal_ex<boost::spirit::tag::char_code<boost::spirit::tag::char_, boost::spirit::char_encoding::ascii>, boost::fusion::vector1<char const (&)[2]> > >, 0> &, boost::proto::exprns_::expr<boost::proto::tagns_::tag::terminal, boost::proto::argsns_::term<const boost::phoenix::actor<boost::phoenix::composite<boost::phoenix::assign_eval, boost::fusion::vector<boost::spirit::local_variable<0>, boost::spirit::argument<0>, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_> > > &>, 0> >, 2> &>, 2> &, const boost::proto::exprns_::expr<boost::proto::tagns_::tag::subscript, boost::proto::argsns_::list2<const boost::proto::exprns_::expr<boost::proto::tagns_::tag::terminal, boost::proto::argsns_::term<boost::spirit::tag::no_skip>, 0> &, const boost::proto::exprns_::expr<boost::proto::tagns_::tag::dereference, boost::proto::argsns_::list1<const boost::proto::exprns_::expr<boost::proto::tagns_::tag::minus, boost::proto::argsns_::list2<const boost::spirit::terminal<boost::spirit::tag::char_code<boost::spirit::tag::char_, boost::spirit::char_encoding::ascii> > &, const boost::proto::exprns_::expr<boost::proto::tagns_::tag::terminal, boost::proto::argsns_::term<boost::spirit::lazy_terminal<boost::spirit::tag::char_code<boost::spirit::tag::char_, boost::spirit::char_encoding::ascii>, boost::phoenix::actor<boost::phoenix::composite<boost::phoenix::detail::function_eval<1>, boost::fusion::vector<boost::phoenix::value<boost::spirit::terminal<boost::spirit::tag::char_code<boost::spirit::tag::char_, boost::spirit::char_encoding::ascii> > >, boost::spirit::local_variable<0>, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_> > >, 1> >, 0> &>, 2> &>, 1> &>, 2> &>, 2> &, const boost::proto::exprns_::expr<boost::proto::tagns_::tag::terminal, boost::proto::argsns_::term<boost::spirit::lazy_terminal<boost::spirit::tag::lit, boost::phoenix::actor<boost::phoenix::composite<boost::phoenix::detail::function_eval<1>, boost::fusion::vector<boost::phoenix::value<boost::spirit::terminal<boost::spirit::tag::lit> >, boost::spirit::local_variable<0>, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_> > >, 1> >, 0> &>, 2> >' requested here
            define<mpl::false_>(*this, expr, traits::matches<qi::domain, Expr>());
            ^
/home/jim/work/mlite/mlite.cpp:99:63: note: in instantiation of function template specialization 'boost::spirit::qi::rule<__gnu_cxx::__normal_iterator<const char *, std::basic_string<char> >, std::basic_string<char> (), boost::proto::exprns_::expr<boost::proto::tagns_::tag::terminal, boost::proto::argsns_::term<boost::spirit::tag::char_code<boost::spirit::tag::space, boost::spirit::char_encoding::ascii> >, 0>, boost::spirit::unused_type, boost::spirit::unused_type>::rule<boost::proto::exprns_::expr<boost::proto::tagns_::tag::shift_right, boost::proto::argsns_::list2<const boost::proto::exprns_::expr<boost::proto::tagns_::tag::shift_right, boost::proto::argsns_::list2<const boost::proto::exprns_::expr<boost::proto::tagns_::tag::subscript, boost::proto::argsns_::list2<const boost::proto::exprns_::expr<boost::proto::tagns_::tag::terminal, boost::proto::argsns_::term<boost::spirit::tag::omit>, 0> &, const boost::proto::exprns_::expr<boost::proto::tagns_::tag::subscript, boost::proto::argsns_::list2<boost::proto::exprns_::expr<boost::proto::tagns_::tag::terminal, boost::proto::argsns_::term<boost::spirit::terminal_ex<boost::spirit::tag::char_code<boost::spirit::tag::char_, boost::spirit::char_encoding::ascii>, boost::fusion::vector1<char const (&)[2]> > >, 0> &, boost::proto::exprns_::expr<boost::proto::tagns_::tag::terminal, boost::proto::argsns_::term<const boost::phoenix::actor<boost::phoenix::composite<boost::phoenix::assign_eval, boost::fusion::vector<boost::spirit::local_variable<0>, boost::spirit::argument<0>, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_> > > &>, 0> >, 2> &>, 2> &, const boost::proto::exprns_::expr<boost::proto::tagns_::tag::subscript, boost::proto::argsns_::list2<const boost::proto::exprns_::expr<boost::proto::tagns_::tag::terminal, boost::proto::argsns_::term<boost::spirit::tag::no_skip>, 0> &, const boost::proto::exprns_::expr<boost::proto::tagns_::tag::dereference, boost::proto::argsns_::list1<const boost::proto::exprns_::expr<boost::proto::tagns_::tag::minus, boost::proto::argsns_::list2<const boost::spirit::terminal<boost::spirit::tag::char_code<boost::spirit::tag::char_, boost::spirit::char_encoding::ascii> > &, const boost::proto::exprns_::expr<boost::proto::tagns_::tag::terminal, boost::proto::argsns_::term<boost::spirit::lazy_terminal<boost::spirit::tag::char_code<boost::spirit::tag::char_, boost::spirit::char_encoding::ascii>, boost::phoenix::actor<boost::phoenix::composite<boost::phoenix::detail::function_eval<1>, boost::fusion::vector<boost::phoenix::value<boost::spirit::terminal<boost::spirit::tag::char_code<boost::spirit::tag::char_, boost::spirit::char_encoding::ascii> > >, boost::spirit::local_variable<0>, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_> > >, 1> >, 0> &>, 2> &>, 1> &>, 2> &>, 2> &, const boost::proto::exprns_::expr<boost::proto::tagns_::tag::terminal, boost::proto::argsns_::term<boost::spirit::lazy_terminal<boost::spirit::tag::lit, boost::phoenix::actor<boost::phoenix::composite<boost::phoenix::detail::function_eval<1>, boost::fusion::vector<boost::phoenix::value<boost::spirit::terminal<boost::spirit::tag::lit> >, boost::spirit::local_variable<0>, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_> > >, 1> >, 0> &>, 2> >' requested here
qi::rule<Iterator, std::string(), space_type> IDENT, STRING = omit [ char_("\"") [_a =_1] ] >> no_skip [ *(char_ - char_(_a)) ] >> lit(_a) ;
                                                              ^
/usr/include/boost/spirit/home/qi/detail/pass_container.hpp:287:14: note: candidate function [with Component = boost::spirit::qi::lazy_parser<boost::phoenix::actor<boost::phoenix::composite<boost::phoenix::detail::function_eval<1>, boost::fusion::vector<boost::phoenix::value<boost::spirit::terminal<boost::spirit::tag::lit> >, boost::spirit::local_variable<0>, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_> > >, boost::spirit::unused_type>] not viable: no known conversion from 'predicate' (aka 'int') to 'mpl::false_' (aka 'bool_<false>') for 2nd argument
        bool dispatch_attribute(Component const& component, mpl::false_) const
             ^
/usr/include/boost/spirit/home/qi/detail/pass_container.hpp:294:14: note: candidate function [with Component = boost::spirit::qi::lazy_parser<boost::phoenix::actor<boost::phoenix::composite<boost::phoenix::detail::function_eval<1>, boost::fusion::vector<boost::phoenix::value<boost::spirit::terminal<boost::spirit::tag::lit> >, boost::spirit::local_variable<0>, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_, boost::fusion::void_> > >, boost::spirit::unused_type>] not viable: no known conversion from 'predicate' (aka 'int') to 'mpl::true_' (aka 'bool_<true>') for 2nd argument
        bool dispatch_attribute(Component const& component, mpl::true_) const
             ^
18 warnings and 8 errors generated.
make[1]: *** [Debug/mlite.o] Error 1
make[1]: Leaving directory `/home/jim/work/mlite'
make: *** [All] Error 2
